{
    "wc": {
        "prefix": "wc",
        "body": "wc()",
        "description": "Main instance of WooCommerce."
    },
    "wc_lostpassword_url": {
        "prefix": "wc_lostpassword_url",
        "body": "wc_lostpassword_url( ${1:default_url} )",
        "description": "Returns the url to the lost password endpoint url."
    },
    "wc_customer_edit_account_url": {
        "prefix": "wc_customer_edit_account_url",
        "body": "wc_customer_edit_account_url()",
        "description": "Get the link to the edit account details page."
    },
    "wc_edit_address_i18n": {
        "prefix": "wc_edit_address_i18n",
        "body": "wc_edit_address_i18n( ${1:id}${2:, ${3:flip}} )",
        "description": "Get the edit address slug translation."
    },
    "wc_get_account_menu_items": {
        "prefix": "wc_get_account_menu_items",
        "body": "wc_get_account_menu_items()",
        "description": "Get My Account menu items."
    },
    "wc_get_account_menu_item_classes": {
        "prefix": "wc_get_account_menu_item_classes",
        "body": "wc_get_account_menu_item_classes( ${1:endpoint} )",
        "description": "Get account menu item classes."
    },
    "wc_get_account_endpoint_url": {
        "prefix": "wc_get_account_endpoint_url",
        "body": "wc_get_account_endpoint_url( ${1:endpoint} )",
        "description": "Get account endpoint URL."
    },
    "wc_get_account_orders_columns": {
        "prefix": "wc_get_account_orders_columns",
        "body": "wc_get_account_orders_columns()",
        "description": "Get My Account > Orders columns."
    },
    "wc_get_account_downloads_columns": {
        "prefix": "wc_get_account_downloads_columns",
        "body": "wc_get_account_downloads_columns()",
        "description": "Get My Account > Downloads columns."
    },
    "wc_get_account_payment_methods_columns": {
        "prefix": "wc_get_account_payment_methods_columns",
        "body": "wc_get_account_payment_methods_columns()",
        "description": "Get My Account > Payment methods columns."
    },
    "wc_get_account_payment_methods_types": {
        "prefix": "wc_get_account_payment_methods_types",
        "body": "wc_get_account_payment_methods_types()",
        "description": "Get My Account > Payment methods types"
    },
    "wc_get_account_orders_actions": {
        "prefix": "wc_get_account_orders_actions",
        "body": "wc_get_account_orders_actions( ${1:order} )",
        "description": "Get account orders actions."
    },
    "wc_get_account_formatted_address": {
        "prefix": "wc_get_account_formatted_address",
        "body": "wc_get_account_formatted_address( ${1:${2:address_type}${3:, ${4:customer_id}}} )",
        "description": "Get account formatted address."
    },
    "wc_get_account_saved_payment_methods_list": {
        "prefix": "wc_get_account_saved_payment_methods_list",
        "body": "wc_get_account_saved_payment_methods_list( ${1:list}, ${2:customer_id} )",
        "description": "Returns an array of a user's saved payments list for output on the account tab."
    },
    "wc_get_account_saved_payment_methods_list_item_cc": {
        "prefix": "wc_get_account_saved_payment_methods_list_item_cc",
        "body": "wc_get_account_saved_payment_methods_list_item_cc( ${1:item}, ${2:payment_token} )",
        "description": "Controls the output for credit cards on the my account page."
    },
    "wc_get_account_saved_payment_methods_list_item_echeck": {
        "prefix": "wc_get_account_saved_payment_methods_list_item_echeck",
        "body": "wc_get_account_saved_payment_methods_list_item_echeck( ${1:item}, ${2:payment_token} )",
        "description": "Controls the output for eChecks on the my account page."
    },
    "wc_get_text_attributes": {
        "prefix": "wc_get_text_attributes",
        "body": "wc_get_text_attributes( ${1:raw_attributes} )",
        "description": "Gets text attributes from a string."
    },
    "wc_get_text_attributes_filter_callback": {
        "prefix": "wc_get_text_attributes_filter_callback",
        "body": "wc_get_text_attributes_filter_callback( ${1:value} )",
        "description": "See if an attribute is actually valid."
    },
    "wc_implode_text_attributes": {
        "prefix": "wc_implode_text_attributes",
        "body": "wc_implode_text_attributes( ${1:attributes} )",
        "description": "Implode an array of attributes using WC_DELIMITER."
    },
    "wc_get_attribute_taxonomies": {
        "prefix": "wc_get_attribute_taxonomies",
        "body": "wc_get_attribute_taxonomies()",
        "description": "Get attribute taxonomies."
    },
    "wc_attribute_taxonomy_name": {
        "prefix": "wc_attribute_taxonomy_name",
        "body": "wc_attribute_taxonomy_name( ${1:attribute_name} )",
        "description": "Get a product attribute name."
    },
    "wc_variation_attribute_name": {
        "prefix": "wc_variation_attribute_name",
        "body": "wc_variation_attribute_name( ${1:attribute_name} )",
        "description": "Get the attribute name used when storing values in post meta."
    },
    "wc_attribute_taxonomy_name_by_id": {
        "prefix": "wc_attribute_taxonomy_name_by_id",
        "body": "wc_attribute_taxonomy_name_by_id( ${1:attribute_id} )",
        "description": "Get a product attribute name by ID."
    },
    "wc_attribute_taxonomy_id_by_name": {
        "prefix": "wc_attribute_taxonomy_id_by_name",
        "body": "wc_attribute_taxonomy_id_by_name( ${1:name} )",
        "description": "Get a product attribute ID by name."
    },
    "wc_attribute_label": {
        "prefix": "wc_attribute_label",
        "body": "wc_attribute_label( ${1:name}${2:, ${3:product}} )",
        "description": "Get a product attributes label."
    },
    "wc_attribute_orderby": {
        "prefix": "wc_attribute_orderby",
        "body": "wc_attribute_orderby( ${1:name} )",
        "description": "Get a product attributes orderby setting."
    },
    "wc_get_attribute_taxonomy_names": {
        "prefix": "wc_get_attribute_taxonomy_names",
        "body": "wc_get_attribute_taxonomy_names()",
        "description": "Get an array of product attribute taxonomies."
    },
    "wc_get_attribute_types": {
        "prefix": "wc_get_attribute_types",
        "body": "wc_get_attribute_types()",
        "description": "Get attribute types."
    },
    "wc_has_custom_attribute_types": {
        "prefix": "wc_has_custom_attribute_types",
        "body": "wc_has_custom_attribute_types()",
        "description": "Check if there are custom attribute types."
    },
    "wc_get_attribute_type_label": {
        "prefix": "wc_get_attribute_type_label",
        "body": "wc_get_attribute_type_label( ${1:type} )",
        "description": "Get attribute type label."
    },
    "wc_check_if_attribute_name_is_reserved": {
        "prefix": "wc_check_if_attribute_name_is_reserved",
        "body": "wc_check_if_attribute_name_is_reserved( ${1:attribute_name} )",
        "description": "Check if attribute name is reserved."
    },
    "wc_attributes_array_filter_visible": {
        "prefix": "wc_attributes_array_filter_visible",
        "body": "wc_attributes_array_filter_visible( ${1:attribute} )",
        "description": "Callback for array filter to get visible only."
    },
    "wc_attributes_array_filter_variation": {
        "prefix": "wc_attributes_array_filter_variation",
        "body": "wc_attributes_array_filter_variation( ${1:attribute} )",
        "description": "Callback for array filter to get variation attributes only."
    },
    "wc_is_attribute_in_product_name": {
        "prefix": "wc_is_attribute_in_product_name",
        "body": "wc_is_attribute_in_product_name( ${1:attribute}, ${2:name} )",
        "description": "Check if an attribute is included in the attributes area of a variation name."
    },
    "wc_array_filter_default_attributes": {
        "prefix": "wc_array_filter_default_attributes",
        "body": "wc_array_filter_default_attributes( ${1:attribute} )",
        "description": "Callback for array filter to get default attributes.  Will allow for '0' string values, but regard all other"
    },
    "wc_get_attribute": {
        "prefix": "wc_get_attribute",
        "body": "wc_get_attribute( ${1:id} )",
        "description": "Get attribute data by ID."
    },
    "wc_create_attribute": {
        "prefix": "wc_create_attribute",
        "body": "wc_create_attribute( ${1:args} )",
        "description": "Create attribute."
    },
    "wc_update_attribute": {
        "prefix": "wc_update_attribute",
        "body": "wc_update_attribute( ${1:id}, ${2:args} )",
        "description": "Update an attribute."
    },
    "wc_delete_attribute": {
        "prefix": "wc_delete_attribute",
        "body": "wc_delete_attribute( ${1:id} )",
        "description": "Delete attribute by ID."
    },
    "wc_protected_product_add_to_cart": {
        "prefix": "wc_protected_product_add_to_cart",
        "body": "wc_protected_product_add_to_cart( ${1:passed}, ${2:product_id} )",
        "description": "Prevent password protected products being added to the cart."
    },
    "wc_empty_cart": {
        "prefix": "wc_empty_cart",
        "body": "wc_empty_cart()",
        "description": "Clears the cart session when called."
    },
    "wc_load_persistent_cart": {
        "prefix": "wc_load_persistent_cart",
        "body": "wc_load_persistent_cart( ${1:user_login}, ${2:user} )",
        "description": "Load the persistent cart."
    },
    "wc_get_raw_referer": {
        "prefix": "wc_get_raw_referer",
        "body": "wc_get_raw_referer()",
        "description": "Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer."
    },
    "wc_add_to_cart_message": {
        "prefix": "wc_add_to_cart_message",
        "body": "wc_add_to_cart_message( ${1:products}${2:, ${3:show_qty}${4:, ${5:return}}} )",
        "description": "Add to cart messages."
    },
    "wc_format_list_of_items": {
        "prefix": "wc_format_list_of_items",
        "body": "wc_format_list_of_items( ${1:items} )",
        "description": "Comma separate a list of item names, and replace final comma with 'and'."
    },
    "wc_clear_cart_after_payment": {
        "prefix": "wc_clear_cart_after_payment",
        "body": "wc_clear_cart_after_payment()",
        "description": "Clear cart after payment."
    },
    "wc_cart_totals_subtotal_html": {
        "prefix": "wc_cart_totals_subtotal_html",
        "body": "wc_cart_totals_subtotal_html()",
        "description": "Get the subtotal."
    },
    "wc_cart_totals_shipping_html": {
        "prefix": "wc_cart_totals_shipping_html",
        "body": "wc_cart_totals_shipping_html()",
        "description": "Get shipping methods."
    },
    "wc_cart_totals_taxes_total_html": {
        "prefix": "wc_cart_totals_taxes_total_html",
        "body": "wc_cart_totals_taxes_total_html()",
        "description": "Get taxes total."
    },
    "wc_cart_totals_coupon_label": {
        "prefix": "wc_cart_totals_coupon_label",
        "body": "wc_cart_totals_coupon_label( ${1:coupon}${2:, ${3:echo}} )",
        "description": "Get a coupon label."
    },
    "wc_cart_totals_coupon_html": {
        "prefix": "wc_cart_totals_coupon_html",
        "body": "wc_cart_totals_coupon_html( ${1:coupon} )",
        "description": "Get coupon display HTML."
    },
    "wc_cart_totals_order_total_html": {
        "prefix": "wc_cart_totals_order_total_html",
        "body": "wc_cart_totals_order_total_html()",
        "description": "Get order total html including inc tax if needed."
    },
    "wc_cart_totals_fee_html": {
        "prefix": "wc_cart_totals_fee_html",
        "body": "wc_cart_totals_fee_html( ${1:fee} )",
        "description": "Get the fee value."
    },
    "wc_cart_totals_shipping_method_label": {
        "prefix": "wc_cart_totals_shipping_method_label",
        "body": "wc_cart_totals_shipping_method_label( ${1:method} )",
        "description": "Get a shipping methods full label including price."
    },
    "wc_cart_round_discount": {
        "prefix": "wc_cart_round_discount",
        "body": "wc_cart_round_discount( ${1:value}, ${2:precision} )",
        "description": "Round discount."
    },
    "wc_get_chosen_shipping_method_ids": {
        "prefix": "wc_get_chosen_shipping_method_ids",
        "body": "wc_get_chosen_shipping_method_ids()",
        "description": "Gets chosen shipping method IDs from chosen_shipping_methods session, without instance IDs."
    },
    "wc_get_chosen_shipping_method_for_package": {
        "prefix": "wc_get_chosen_shipping_method_for_package",
        "body": "wc_get_chosen_shipping_method_for_package( ${1:key}, ${2:package} )",
        "description": "Get chosen method for package from session."
    },
    "wc_get_default_shipping_method_for_package": {
        "prefix": "wc_get_default_shipping_method_for_package",
        "body": "wc_get_default_shipping_method_for_package( ${1:key}, ${2:package}, ${3:chosen_method} )",
        "description": "Choose the default method for a package."
    },
    "wc_shipping_methods_have_changed": {
        "prefix": "wc_shipping_methods_have_changed",
        "body": "wc_shipping_methods_have_changed( ${1:key}, ${2:package} )",
        "description": "See if the methods have changed since the last request."
    },
    "wc_get_cart_item_data_hash": {
        "prefix": "wc_get_cart_item_data_hash",
        "body": "wc_get_cart_item_data_hash( ${1:product} )",
        "description": "Gets a hash of important product data that when changed should cause cart items to be invalidated."
    },
    "is_woocommerce": {
        "prefix": "is_woocommerce",
        "body": "is_woocommerce()",
        "description": "Is_woocommerce - Returns true if on a page which uses WooCommerce templates (cart and checkout are standard pages with shortcodes and thus are not included)."
    },
    "is_shop": {
        "prefix": "is_shop",
        "body": "is_shop()",
        "description": "Is_shop - Returns true when viewing the product type archive (shop)."
    },
    "is_product_taxonomy": {
        "prefix": "is_product_taxonomy",
        "body": "is_product_taxonomy()",
        "description": "Is_product_taxonomy - Returns true when viewing a product taxonomy archive."
    },
    "is_product_category": {
        "prefix": "is_product_category",
        "body": "is_product_category( ${1:term} )",
        "description": "Is_product_category - Returns true when viewing a product category."
    },
    "is_product_tag": {
        "prefix": "is_product_tag",
        "body": "is_product_tag( ${1:term} )",
        "description": "Is_product_tag - Returns true when viewing a product tag."
    },
    "is_product": {
        "prefix": "is_product",
        "body": "is_product()",
        "description": "Is_product - Returns true when viewing a single product."
    },
    "is_cart": {
        "prefix": "is_cart",
        "body": "is_cart()",
        "description": "Is_cart - Returns true when viewing the cart page."
    },
    "is_checkout": {
        "prefix": "is_checkout",
        "body": "is_checkout()",
        "description": "Is_checkout - Returns true when viewing the checkout page."
    },
    "is_checkout_pay_page": {
        "prefix": "is_checkout_pay_page",
        "body": "is_checkout_pay_page()",
        "description": "Is_checkout_pay - Returns true when viewing the checkout's pay page."
    },
    "is_wc_endpoint_url": {
        "prefix": "is_wc_endpoint_url",
        "body": "is_wc_endpoint_url( ${1:endpoint} )",
        "description": "Is_wc_endpoint_url - Check if an endpoint is showing."
    },
    "is_account_page": {
        "prefix": "is_account_page",
        "body": "is_account_page()",
        "description": "Is_account_page - Returns true when viewing an account page."
    },
    "is_view_order_page": {
        "prefix": "is_view_order_page",
        "body": "is_view_order_page()",
        "description": "Is_view_order_page - Returns true when on the view order page."
    },
    "is_edit_account_page": {
        "prefix": "is_edit_account_page",
        "body": "is_edit_account_page()",
        "description": "Check for edit account page."
    },
    "is_order_received_page": {
        "prefix": "is_order_received_page",
        "body": "is_order_received_page()",
        "description": "Is_order_received_page - Returns true when viewing the order received page."
    },
    "is_add_payment_method_page": {
        "prefix": "is_add_payment_method_page",
        "body": "is_add_payment_method_page()",
        "description": "Is_add_payment_method_page - Returns true when viewing the add payment method page."
    },
    "is_lost_password_page": {
        "prefix": "is_lost_password_page",
        "body": "is_lost_password_page()",
        "description": "Is_lost_password_page - Returns true when viewing the lost password page."
    },
    "is_ajax": {
        "prefix": "is_ajax",
        "body": "is_ajax()",
        "description": "Is_ajax - Returns true when the page is loaded via ajax."
    },
    "is_store_notice_showing": {
        "prefix": "is_store_notice_showing",
        "body": "is_store_notice_showing()",
        "description": "Is_store_notice_showing - Returns true when store notice is active."
    },
    "is_filtered": {
        "prefix": "is_filtered",
        "body": "is_filtered()",
        "description": "Is_filtered - Returns true when filtering products using layered nav or price sliders."
    },
    "taxonomy_is_product_attribute": {
        "prefix": "taxonomy_is_product_attribute",
        "body": "taxonomy_is_product_attribute( ${1:name} )",
        "description": "Returns true when the passed taxonomy name is a product attribute."
    },
    "meta_is_product_attribute": {
        "prefix": "meta_is_product_attribute",
        "body": "meta_is_product_attribute( ${1:name}, ${2:value}, ${3:product_id} )",
        "description": "Returns true when the passed meta name is a product attribute."
    },
    "wc_tax_enabled": {
        "prefix": "wc_tax_enabled",
        "body": "wc_tax_enabled()",
        "description": "Are store-wide taxes enabled?"
    },
    "wc_shipping_enabled": {
        "prefix": "wc_shipping_enabled",
        "body": "wc_shipping_enabled()",
        "description": "Is shipping enabled?"
    },
    "wc_prices_include_tax": {
        "prefix": "wc_prices_include_tax",
        "body": "wc_prices_include_tax()",
        "description": "Are prices inclusive of tax?"
    },
    "wc_is_valid_url": {
        "prefix": "wc_is_valid_url",
        "body": "wc_is_valid_url( ${1:url} )",
        "description": "Simple check for validating a URL, it must start with http:\/\/ or https:\/\/."
    },
    "wc_site_is_https": {
        "prefix": "wc_site_is_https",
        "body": "wc_site_is_https()",
        "description": "Check if the home URL is https. If it is, we don't need to do things such as 'force ssl'."
    },
    "wc_checkout_is_https": {
        "prefix": "wc_checkout_is_https",
        "body": "wc_checkout_is_https()",
        "description": "Check if the checkout is configured for https. Look at options, WP HTTPS plugin, or the permalink itself."
    },
    "wc_post_content_has_shortcode": {
        "prefix": "wc_post_content_has_shortcode",
        "body": "wc_post_content_has_shortcode( ${1:tag} )",
        "description": "Checks whether the content passed contains a specific short code."
    },
    "wc_maybe_define_constant": {
        "prefix": "wc_maybe_define_constant",
        "body": "wc_maybe_define_constant( ${1:name}, ${2:value} )",
        "description": "Define a constant if it is not already defined."
    },
    "wc_create_order": {
        "prefix": "wc_create_order",
        "body": "wc_create_order( ${1:args} )",
        "description": "Create a new order programmatically."
    },
    "wc_update_order": {
        "prefix": "wc_update_order",
        "body": "wc_update_order( ${1:args} )",
        "description": "Update an order. Uses wc_create_order."
    },
    "wc_get_template_part": {
        "prefix": "wc_get_template_part",
        "body": "wc_get_template_part( ${1:slug}${2:, ${3:name}} )",
        "description": "Get template part (for templates like the shop-loop)."
    },
    "wc_get_template": {
        "prefix": "wc_get_template",
        "body": "wc_get_template( ${1:template_name}${2:, ${3:args}${4:, ${5:template_path}${6:, ${7:default_path}}}} )",
        "description": "Get other templates (e.g. product attributes) passing attributes and including the file."
    },
    "wc_get_template_html": {
        "prefix": "wc_get_template_html",
        "body": "wc_get_template_html( ${1:template_name}${2:, ${3:args}${4:, ${5:template_path}${6:, ${7:default_path}}}} )",
        "description": "Like wc_get_template, but returns the HTML instead of outputting."
    },
    "wc_locate_template": {
        "prefix": "wc_locate_template",
        "body": "wc_locate_template( ${1:template_name}${2:, ${3:template_path}${4:, ${5:default_path}}} )",
        "description": "Locate a template and return the path for inclusion."
    },
    "get_woocommerce_currency": {
        "prefix": "get_woocommerce_currency",
        "body": "get_woocommerce_currency()",
        "description": "Get Base Currency Code."
    },
    "get_woocommerce_currencies": {
        "prefix": "get_woocommerce_currencies",
        "body": "get_woocommerce_currencies()",
        "description": "Get full list of currency codes."
    },
    "get_woocommerce_currency_symbol": {
        "prefix": "get_woocommerce_currency_symbol",
        "body": "get_woocommerce_currency_symbol( ${1:currency} )",
        "description": "Get Currency symbol."
    },
    "wc_mail": {
        "prefix": "wc_mail",
        "body": "wc_mail( ${1:to}, ${2:subject}, ${3:message}${4:, ${5:headers}${6:, ${7:attachments}}} )",
        "description": "Send HTML emails from WooCommerce."
    },
    "wc_get_theme_support": {
        "prefix": "wc_get_theme_support",
        "body": "wc_get_theme_support( ${1:${2:prop}${3:, ${4:default}}} )",
        "description": "Return \"theme support\" values from the current theme, if set."
    },
    "wc_get_image_size": {
        "prefix": "wc_get_image_size",
        "body": "wc_get_image_size( ${1:image_size} )",
        "description": "Get an image size by name or defined dimensions."
    },
    "wc_enqueue_js": {
        "prefix": "wc_enqueue_js",
        "body": "wc_enqueue_js( ${1:code} )",
        "description": "Queue some JavaScript code to be output in the footer."
    },
    "wc_print_js": {
        "prefix": "wc_print_js",
        "body": "wc_print_js()",
        "description": "Output any queued javascript code in the footer."
    },
    "wc_setcookie": {
        "prefix": "wc_setcookie",
        "body": "wc_setcookie( ${1:name}, ${2:value}${3:, ${4:expire}${5:, ${6:secure}}${7:, ${8:httponly}}} )",
        "description": "Set a cookie - wrapper for setcookie using WP constants."
    },
    "get_woocommerce_api_url": {
        "prefix": "get_woocommerce_api_url",
        "body": "get_woocommerce_api_url( ${1:path} )",
        "description": "Get the URL to the WooCommerce REST API."
    },
    "wc_get_log_file_path": {
        "prefix": "wc_get_log_file_path",
        "body": "wc_get_log_file_path( ${1:handle} )",
        "description": "Get a log file path."
    },
    "wc_get_log_file_name": {
        "prefix": "wc_get_log_file_name",
        "body": "wc_get_log_file_name( ${1:handle} )",
        "description": "Get a log file name."
    },
    "wc_get_page_children": {
        "prefix": "wc_get_page_children",
        "body": "wc_get_page_children( ${1:page_id} )",
        "description": "Recursively get page children."
    },
    "flush_rewrite_rules_on_shop_page_save": {
        "prefix": "flush_rewrite_rules_on_shop_page_save",
        "body": "flush_rewrite_rules_on_shop_page_save()",
        "description": "Flushes rewrite rules when the shop page (or it's children) gets saved."
    },
    "wc_fix_rewrite_rules": {
        "prefix": "wc_fix_rewrite_rules",
        "body": "wc_fix_rewrite_rules( ${1:rules} )",
        "description": "Various rewrite rule fixes."
    },
    "wc_fix_product_attachment_link": {
        "prefix": "wc_fix_product_attachment_link",
        "body": "wc_fix_product_attachment_link( ${1:link}, ${2:post_id} )",
        "description": "Prevent product attachment links from breaking when using complex rewrite structures."
    },
    "wc_ms_protect_download_rewite_rules": {
        "prefix": "wc_ms_protect_download_rewite_rules",
        "body": "wc_ms_protect_download_rewite_rules( ${1:rewrite} )",
        "description": "Protect downloads from ms-files.php in multisite."
    },
    "wc_format_country_state_string": {
        "prefix": "wc_format_country_state_string",
        "body": "wc_format_country_state_string( ${1:country_string} )",
        "description": "Formats a string in the format COUNTRY:STATE into an array."
    },
    "wc_get_base_location": {
        "prefix": "wc_get_base_location",
        "body": "wc_get_base_location()",
        "description": "Get the store's base location."
    },
    "wc_get_customer_default_location": {
        "prefix": "wc_get_customer_default_location",
        "body": "wc_get_customer_default_location()",
        "description": "Get the customer's default location."
    },
    "wc_get_user_agent": {
        "prefix": "wc_get_user_agent",
        "body": "wc_get_user_agent()",
        "description": "Get user agent string."
    },
    "hash_equals": {
        "prefix": "hash_equals",
        "body": "hash_equals( ${1:a}, ${2:b} )",
        "description": "Compare two strings in constant time."
    },
    "wc_rand_hash": {
        "prefix": "wc_rand_hash",
        "body": "wc_rand_hash()",
        "description": "Generate a rand hash."
    },
    "wc_api_hash": {
        "prefix": "wc_api_hash",
        "body": "wc_api_hash( ${1:data} )",
        "description": "WC API - Hash."
    },
    "wc_array_cartesian": {
        "prefix": "wc_array_cartesian",
        "body": "wc_array_cartesian( ${1:input} )",
        "description": "Find all possible combinations of values from the input array and return in a logical order."
    },
    "wc_transaction_query": {
        "prefix": "wc_transaction_query",
        "body": "wc_transaction_query( ${1:${2:type}${3:, ${4:force}}} )",
        "description": "Run a MySQL transaction query, if supported."
    },
    "wc_get_cart_url": {
        "prefix": "wc_get_cart_url",
        "body": "wc_get_cart_url()",
        "description": "Gets the url to the cart page."
    },
    "wc_get_checkout_url": {
        "prefix": "wc_get_checkout_url",
        "body": "wc_get_checkout_url()",
        "description": "Gets the url to the checkout page."
    },
    "woocommerce_register_shipping_method": {
        "prefix": "woocommerce_register_shipping_method",
        "body": "woocommerce_register_shipping_method( ${1:shipping_method} )",
        "description": "Register a shipping method."
    },
    "wc_get_shipping_zone": {
        "prefix": "wc_get_shipping_zone",
        "body": "wc_get_shipping_zone( ${1:package} )",
        "description": "Get the shipping zone matching a given package from the cart."
    },
    "wc_get_credit_card_type_label": {
        "prefix": "wc_get_credit_card_type_label",
        "body": "wc_get_credit_card_type_label( ${1:type} )",
        "description": "Get a nice name for credit card providers."
    },
    "wc_back_link": {
        "prefix": "wc_back_link",
        "body": "wc_back_link( ${1:label}, ${2:url} )",
        "description": "Outputs a \"back\" link so admin screens can easily jump back a page."
    },
    "wc_help_tip": {
        "prefix": "wc_help_tip",
        "body": "wc_help_tip( ${1:tip}${2:, ${3:allow_html}} )",
        "description": "Display a WooCommerce help tip."
    },
    "wc_get_wildcard_postcodes": {
        "prefix": "wc_get_wildcard_postcodes",
        "body": "wc_get_wildcard_postcodes( ${1:postcode}${2:, ${3:country}} )",
        "description": "Return a list of potential postcodes for wildcard searching."
    },
    "wc_postcode_location_matcher": {
        "prefix": "wc_postcode_location_matcher",
        "body": "wc_postcode_location_matcher( ${1:postcode}, ${2:objects}, ${3:object_id_key}, ${4:object_compare_key}${5:, ${6:country}} )",
        "description": "Used by shipping zones and taxes to compare a given $postcode to stored"
    },
    "wc_get_shipping_method_count": {
        "prefix": "wc_get_shipping_method_count",
        "body": "wc_get_shipping_method_count( ${1:include_legacy} )",
        "description": "Gets number of shipping methods currently enabled. Used to identify if"
    },
    "wc_set_time_limit": {
        "prefix": "wc_set_time_limit",
        "body": "wc_set_time_limit( ${1:limit} )",
        "description": "Wrapper for set_time_limit to see if it is enabled."
    },
    "wc_nocache_headers": {
        "prefix": "wc_nocache_headers",
        "body": "wc_nocache_headers()",
        "description": "Wrapper for nocache_headers which also disables page caching."
    },
    "wc_product_attribute_uasort_comparison": {
        "prefix": "wc_product_attribute_uasort_comparison",
        "body": "wc_product_attribute_uasort_comparison( ${1:a}, ${2:b} )",
        "description": "Used to sort products attributes with uasort."
    },
    "wc_shipping_zone_method_order_uasort_comparison": {
        "prefix": "wc_shipping_zone_method_order_uasort_comparison",
        "body": "wc_shipping_zone_method_order_uasort_comparison( ${1:a}, ${2:b} )",
        "description": "Used to sort shipping zone methods with uasort."
    },
    "wc_get_tax_rounding_mode": {
        "prefix": "wc_get_tax_rounding_mode",
        "body": "wc_get_tax_rounding_mode()",
        "description": "Get rounding mode for internal tax calculations."
    },
    "wc_get_rounding_precision": {
        "prefix": "wc_get_rounding_precision",
        "body": "wc_get_rounding_precision()",
        "description": "Get rounding precision for internal WC calculations."
    },
    "wc_add_number_precision": {
        "prefix": "wc_add_number_precision",
        "body": "wc_add_number_precision( ${1:value}${2:, ${3:round}} )",
        "description": "Add precision to a number and return a number."
    },
    "wc_remove_number_precision": {
        "prefix": "wc_remove_number_precision",
        "body": "wc_remove_number_precision( ${1:value} )",
        "description": "Remove precision from a number and return a float."
    },
    "wc_add_number_precision_deep": {
        "prefix": "wc_add_number_precision_deep",
        "body": "wc_add_number_precision_deep( ${1:value}${2:, ${3:round}} )",
        "description": "Add precision to an array of number and return an array of int."
    },
    "wc_remove_number_precision_deep": {
        "prefix": "wc_remove_number_precision_deep",
        "body": "wc_remove_number_precision_deep( ${1:value} )",
        "description": "Remove precision from an array of number and return an array of int."
    },
    "wc_get_logger": {
        "prefix": "wc_get_logger",
        "body": "wc_get_logger()",
        "description": "Get a shared logger instance."
    },
    "wc_cleanup_logs": {
        "prefix": "wc_cleanup_logs",
        "body": "wc_cleanup_logs()",
        "description": "Trigger logging cleanup using the logging class."
    },
    "wc_print_r": {
        "prefix": "wc_print_r",
        "body": "wc_print_r( ${1:expression}${2:, ${3:return}} )",
        "description": "Prints human-readable information about a variable."
    },
    "wc_register_default_log_handler": {
        "prefix": "wc_register_default_log_handler",
        "body": "wc_register_default_log_handler( ${1:handlers} )",
        "description": "Registers the default log handler."
    },
    "wc_list_pluck": {
        "prefix": "wc_list_pluck",
        "body": "wc_list_pluck( ${1:list}, ${2:callback_or_field}${3:, ${4:index_key}} )",
        "description": "Based on wp_list_pluck, this calls a method instead of returning a property."
    },
    "wc_get_permalink_structure": {
        "prefix": "wc_get_permalink_structure",
        "body": "wc_get_permalink_structure()",
        "description": "Get permalink settings for things like products and taxonomies."
    },
    "wc_switch_to_site_locale": {
        "prefix": "wc_switch_to_site_locale",
        "body": "wc_switch_to_site_locale()",
        "description": "Switch WooCommerce to site language."
    },
    "wc_restore_locale": {
        "prefix": "wc_restore_locale",
        "body": "wc_restore_locale()",
        "description": "Switch WooCommerce language to original."
    },
    "wc_make_phone_clickable": {
        "prefix": "wc_make_phone_clickable",
        "body": "wc_make_phone_clickable( ${1:phone} )",
        "description": "Convert plaintext phone number to clickable phone number."
    },
    "wc_get_post_data_by_key": {
        "prefix": "wc_get_post_data_by_key",
        "body": "wc_get_post_data_by_key( ${1:key}${2:, ${3:default}} )",
        "description": "Get an item of post data if set, otherwise return a default value."
    },
    "wc_get_var": {
        "prefix": "wc_get_var",
        "body": "wc_get_var( ${1:&var}${2:, ${3:default}} )",
        "description": "Get data if set, otherwise return a default value or null. Prevents notices when data is not set."
    },
    "wc_enable_wc_plugin_headers": {
        "prefix": "wc_enable_wc_plugin_headers",
        "body": "wc_enable_wc_plugin_headers( ${1:headers} )",
        "description": "Read in WooCommerce headers when reading plugin headers."
    },
    "wc_prevent_dangerous_auto_updates": {
        "prefix": "wc_prevent_dangerous_auto_updates",
        "body": "wc_prevent_dangerous_auto_updates( ${1:should_update}, ${2:plugin} )",
        "description": "Prevent auto-updating the WooCommerce plugin on major releases if there are untested extensions active."
    },
    "wc_delete_expired_transients": {
        "prefix": "wc_delete_expired_transients",
        "body": "wc_delete_expired_transients()",
        "description": "Delete expired transients."
    },
    "wc_get_relative_url": {
        "prefix": "wc_get_relative_url",
        "body": "wc_get_relative_url( ${1:url} )",
        "description": "Make a URL relative, if possible."
    },
    "wc_is_external_resource": {
        "prefix": "wc_is_external_resource",
        "body": "wc_is_external_resource( ${1:url} )",
        "description": "See if a resource is remote."
    },
    "wc_is_active_theme": {
        "prefix": "wc_is_active_theme",
        "body": "wc_is_active_theme( ${1:theme} )",
        "description": "See if theme\/s is activate or not."
    },
    "wc_cleanup_session_data": {
        "prefix": "wc_cleanup_session_data",
        "body": "wc_cleanup_session_data()",
        "description": "Cleans up session data - cron callback."
    },
    "wc_decimal_to_fraction": {
        "prefix": "wc_decimal_to_fraction",
        "body": "wc_decimal_to_fraction( ${1:decimal} )",
        "description": "Convert a decimal (e.g. 3.5) to a fraction (e.g. 7\/2)."
    },
    "wc_round_discount": {
        "prefix": "wc_round_discount",
        "body": "wc_round_discount( ${1:value}, ${2:precision} )",
        "description": "Round discount."
    },
    "wc_selected": {
        "prefix": "wc_selected",
        "body": "wc_selected( ${1:value}, ${2:options} )",
        "description": "Return the html selected attribute if stringified $value is found in array of stringified $options"
    },
    "wc_get_server_database_version": {
        "prefix": "wc_get_server_database_version",
        "body": "wc_get_server_database_version()",
        "description": "Retrieves the MySQL server version. Based on $wpdb."
    },
    "wc_get_coupon_types": {
        "prefix": "wc_get_coupon_types",
        "body": "wc_get_coupon_types()",
        "description": "Get coupon types."
    },
    "wc_get_coupon_type": {
        "prefix": "wc_get_coupon_type",
        "body": "wc_get_coupon_type( ${1:type} )",
        "description": "Get a coupon type's name."
    },
    "wc_get_product_coupon_types": {
        "prefix": "wc_get_product_coupon_types",
        "body": "wc_get_product_coupon_types()",
        "description": "Coupon types that apply to individual products. Controls which validation rules will apply."
    },
    "wc_get_cart_coupon_types": {
        "prefix": "wc_get_cart_coupon_types",
        "body": "wc_get_cart_coupon_types()",
        "description": "Coupon types that apply to the cart as a whole. Controls which validation rules will apply."
    },
    "wc_coupons_enabled": {
        "prefix": "wc_coupons_enabled",
        "body": "wc_coupons_enabled()",
        "description": "Check if coupons are enabled."
    },
    "wc_get_coupon_code_by_id": {
        "prefix": "wc_get_coupon_code_by_id",
        "body": "wc_get_coupon_code_by_id( ${1:id} )",
        "description": "Get coupon code by ID."
    },
    "wc_get_coupon_id_by_code": {
        "prefix": "wc_get_coupon_id_by_code",
        "body": "wc_get_coupon_id_by_code( ${1:code}${2:, ${3:exclude}} )",
        "description": "Get coupon code by ID."
    },
    "wc_string_to_bool": {
        "prefix": "wc_string_to_bool",
        "body": "wc_string_to_bool( ${1:string} )",
        "description": "Converts a string (e.g. 'yes' or 'no') to a bool."
    },
    "wc_bool_to_string": {
        "prefix": "wc_bool_to_string",
        "body": "wc_bool_to_string( ${1:bool} )",
        "description": "Converts a bool to a 'yes' or 'no'."
    },
    "wc_string_to_array": {
        "prefix": "wc_string_to_array",
        "body": "wc_string_to_array( ${1:string}${2:, ${3:delimiter}} )",
        "description": "Explode a string into an array by $delimiter and remove empty values."
    },
    "wc_sanitize_taxonomy_name": {
        "prefix": "wc_sanitize_taxonomy_name",
        "body": "wc_sanitize_taxonomy_name( ${1:taxonomy} )",
        "description": "Sanitize taxonomy names. Slug format (no spaces, lowercase)."
    },
    "wc_sanitize_permalink": {
        "prefix": "wc_sanitize_permalink",
        "body": "wc_sanitize_permalink( ${1:value} )",
        "description": "Sanitize permalink values before insertion into DB."
    },
    "wc_get_filename_from_url": {
        "prefix": "wc_get_filename_from_url",
        "body": "wc_get_filename_from_url( ${1:file_url} )",
        "description": "Gets the filename part of a download URL."
    },
    "wc_get_dimension": {
        "prefix": "wc_get_dimension",
        "body": "wc_get_dimension( ${1:dimension}, ${2:to_unit}${3:, ${4:from_unit}} )",
        "description": "Normalise dimensions, unify to cm then convert to wanted unit value."
    },
    "wc_get_weight": {
        "prefix": "wc_get_weight",
        "body": "wc_get_weight( ${1:weight}, ${2:to_unit}${3:, ${4:from_unit}} )",
        "description": "Normalise weights, unify to kg then convert to wanted unit value."
    },
    "wc_trim_zeros": {
        "prefix": "wc_trim_zeros",
        "body": "wc_trim_zeros( ${1:price} )",
        "description": "Trim trailing zeros off prices."
    },
    "wc_round_tax_total": {
        "prefix": "wc_round_tax_total",
        "body": "wc_round_tax_total( ${1:value}${2:, ${3:precision}} )",
        "description": "Round a tax amount."
    },
    "wc_legacy_round_half_down": {
        "prefix": "wc_legacy_round_half_down",
        "body": "wc_legacy_round_half_down( ${1:value}, ${2:precision} )",
        "description": "Round half down in PHP 5.2."
    },
    "wc_format_refund_total": {
        "prefix": "wc_format_refund_total",
        "body": "wc_format_refund_total( ${1:amount} )",
        "description": "Make a refund total negative."
    },
    "wc_format_decimal": {
        "prefix": "wc_format_decimal",
        "body": "wc_format_decimal( ${1:number}${2:, ${3:dp}${4:, ${5:trim_zeros}}} )",
        "description": "Format decimal numbers ready for DB storage."
    },
    "wc_float_to_string": {
        "prefix": "wc_float_to_string",
        "body": "wc_float_to_string( ${1:float} )",
        "description": "Convert a float to a string without locale formatting which PHP adds when changing floats to strings."
    },
    "wc_format_localized_price": {
        "prefix": "wc_format_localized_price",
        "body": "wc_format_localized_price( ${1:value} )",
        "description": "Format a price with WC Currency Locale settings."
    },
    "wc_format_localized_decimal": {
        "prefix": "wc_format_localized_decimal",
        "body": "wc_format_localized_decimal( ${1:value} )",
        "description": "Format a decimal with PHP Locale settings."
    },
    "wc_format_coupon_code": {
        "prefix": "wc_format_coupon_code",
        "body": "wc_format_coupon_code( ${1:value} )",
        "description": "Format a coupon code."
    },
    "wc_clean": {
        "prefix": "wc_clean",
        "body": "wc_clean( ${1:var} )",
        "description": "Clean variables using sanitize_text_field. Arrays are cleaned recursively."
    },
    "wc_check_invalid_utf8": {
        "prefix": "wc_check_invalid_utf8",
        "body": "wc_check_invalid_utf8( ${1:var} )",
        "description": "wp_check_invalid_utf8 with recursive array support."
    },
    "wc_sanitize_textarea": {
        "prefix": "wc_sanitize_textarea",
        "body": "wc_sanitize_textarea( ${1:var} )",
        "description": "Run wc_clean over posted textarea but maintain line breaks."
    },
    "wc_sanitize_tooltip": {
        "prefix": "wc_sanitize_tooltip",
        "body": "wc_sanitize_tooltip( ${1:var} )",
        "description": "Sanitize a string destined to be a tooltip."
    },
    "wc_array_overlay": {
        "prefix": "wc_array_overlay",
        "body": "wc_array_overlay( ${1:a1}, ${2:a2} )",
        "description": "Merge two arrays."
    },
    "wc_stock_amount": {
        "prefix": "wc_stock_amount",
        "body": "wc_stock_amount( ${1:amount} )",
        "description": "Formats a stock amount by running it through a filter."
    },
    "get_woocommerce_price_format": {
        "prefix": "get_woocommerce_price_format",
        "body": "get_woocommerce_price_format()",
        "description": "Get the price format depending on the currency position."
    },
    "wc_get_price_thousand_separator": {
        "prefix": "wc_get_price_thousand_separator",
        "body": "wc_get_price_thousand_separator()",
        "description": "Return the thousand separator for prices."
    },
    "wc_get_price_decimal_separator": {
        "prefix": "wc_get_price_decimal_separator",
        "body": "wc_get_price_decimal_separator()",
        "description": "Return the decimal separator for prices."
    },
    "wc_get_price_decimals": {
        "prefix": "wc_get_price_decimals",
        "body": "wc_get_price_decimals()",
        "description": "Return the number of decimals after the decimal point."
    },
    "wc_price": {
        "prefix": "wc_price",
        "body": "wc_price( ${1:price}${2:, ${3:args}} )",
        "description": "Format the price with a currency symbol."
    },
    "wc_let_to_num": {
        "prefix": "wc_let_to_num",
        "body": "wc_let_to_num( ${1:size} )",
        "description": "Notation to numbers."
    },
    "wc_date_format": {
        "prefix": "wc_date_format",
        "body": "wc_date_format()",
        "description": "WooCommerce Date Format - Allows to change date format for everything WooCommerce."
    },
    "wc_time_format": {
        "prefix": "wc_time_format",
        "body": "wc_time_format()",
        "description": "WooCommerce Time Format - Allows to change time format for everything WooCommerce."
    },
    "wc_string_to_timestamp": {
        "prefix": "wc_string_to_timestamp",
        "body": "wc_string_to_timestamp( ${1:time_string}${2:, ${3:from_timestamp}} )",
        "description": "Convert mysql datetime to PHP timestamp, forcing UTC. Wrapper for strtotime."
    },
    "wc_string_to_datetime": {
        "prefix": "wc_string_to_datetime",
        "body": "wc_string_to_datetime( ${1:time_string} )",
        "description": "Convert a date string to a WC_DateTime."
    },
    "wc_timezone_string": {
        "prefix": "wc_timezone_string",
        "body": "wc_timezone_string()",
        "description": "WooCommerce Timezone - helper to retrieve the timezone string for a site until."
    },
    "wc_timezone_offset": {
        "prefix": "wc_timezone_offset",
        "body": "wc_timezone_offset()",
        "description": "Get timezone offset in seconds."
    },
    "wc_flatten_meta_callback": {
        "prefix": "wc_flatten_meta_callback",
        "body": "wc_flatten_meta_callback( ${1:value} )",
        "description": "Callback which can flatten post meta (gets the first value if it's an array)."
    },
    "wc_rgb_from_hex": {
        "prefix": "wc_rgb_from_hex",
        "body": "wc_rgb_from_hex( ${1:color} )",
        "description": "Convert RGB to HEX."
    },
    "wc_hex_darker": {
        "prefix": "wc_hex_darker",
        "body": "wc_hex_darker( ${1:color}${2:, ${3:factor}} )",
        "description": "Make HEX color darker."
    },
    "wc_hex_lighter": {
        "prefix": "wc_hex_lighter",
        "body": "wc_hex_lighter( ${1:color}${2:, ${3:factor}} )",
        "description": "Make HEX color lighter."
    },
    "wc_hex_is_light": {
        "prefix": "wc_hex_is_light",
        "body": "wc_hex_is_light( ${1:color} )",
        "description": "Determine whether a hex color is light."
    },
    "wc_light_or_dark": {
        "prefix": "wc_light_or_dark",
        "body": "wc_light_or_dark( ${1:color}${2:, ${3:dark}${4:, ${5:light}}} )",
        "description": "Detect if we should use a light or dark color on a background color."
    },
    "wc_format_hex": {
        "prefix": "wc_format_hex",
        "body": "wc_format_hex( ${1:hex} )",
        "description": "Format string as hex."
    },
    "wc_format_postcode": {
        "prefix": "wc_format_postcode",
        "body": "wc_format_postcode( ${1:postcode}, ${2:country} )",
        "description": "Format the postcode according to the country and length of the postcode."
    },
    "wc_normalize_postcode": {
        "prefix": "wc_normalize_postcode",
        "body": "wc_normalize_postcode( ${1:postcode} )",
        "description": "Normalize postcodes."
    },
    "wc_format_phone_number": {
        "prefix": "wc_format_phone_number",
        "body": "wc_format_phone_number( ${1:phone} )",
        "description": "Format phone numbers."
    },
    "wc_strtoupper": {
        "prefix": "wc_strtoupper",
        "body": "wc_strtoupper( ${1:string} )",
        "description": "Wrapper for mb_strtoupper which see's if supported first."
    },
    "wc_strtolower": {
        "prefix": "wc_strtolower",
        "body": "wc_strtolower( ${1:string} )",
        "description": "Make a string lowercase."
    },
    "wc_trim_string": {
        "prefix": "wc_trim_string",
        "body": "wc_trim_string( ${1:string}${2:, ${3:chars}${4:, ${5:suffix}}} )",
        "description": "Trim a string and append a suffix."
    },
    "wc_format_content": {
        "prefix": "wc_format_content",
        "body": "wc_format_content( ${1:raw_string} )",
        "description": "Format content to display shortcodes."
    },
    "wc_format_product_short_description": {
        "prefix": "wc_format_product_short_description",
        "body": "wc_format_product_short_description( ${1:content} )",
        "description": "Format product short description."
    },
    "wc_format_option_price_separators": {
        "prefix": "wc_format_option_price_separators",
        "body": "wc_format_option_price_separators( ${1:value}, ${2:option}, ${3:raw_value} )",
        "description": "Formats curency symbols when saved in settings."
    },
    "wc_format_option_price_num_decimals": {
        "prefix": "wc_format_option_price_num_decimals",
        "body": "wc_format_option_price_num_decimals( ${1:value}, ${2:option}, ${3:raw_value} )",
        "description": "Formats decimals when saved in settings."
    },
    "wc_format_option_hold_stock_minutes": {
        "prefix": "wc_format_option_hold_stock_minutes",
        "body": "wc_format_option_hold_stock_minutes( ${1:value}, ${2:option}, ${3:raw_value} )",
        "description": "Formats hold stock option and sets cron event up."
    },
    "wc_sanitize_term_text_based": {
        "prefix": "wc_sanitize_term_text_based",
        "body": "wc_sanitize_term_text_based( ${1:term} )",
        "description": "Sanitize terms from an attribute text based."
    },
    "wc_make_numeric_postcode": {
        "prefix": "wc_make_numeric_postcode",
        "body": "wc_make_numeric_postcode( ${1:postcode} )",
        "description": "Make numeric postcode."
    },
    "wc_format_stock_for_display": {
        "prefix": "wc_format_stock_for_display",
        "body": "wc_format_stock_for_display( ${1:product} )",
        "description": "Format the stock amount ready for display based on settings."
    },
    "wc_format_stock_quantity_for_display": {
        "prefix": "wc_format_stock_quantity_for_display",
        "body": "wc_format_stock_quantity_for_display( ${1:stock_quantity}, ${2:product} )",
        "description": "Format the stock quantity ready for display."
    },
    "wc_format_sale_price": {
        "prefix": "wc_format_sale_price",
        "body": "wc_format_sale_price( ${1:regular_price}, ${2:sale_price} )",
        "description": "Format a sale price for display."
    },
    "wc_format_price_range": {
        "prefix": "wc_format_price_range",
        "body": "wc_format_price_range( ${1:from}, ${2:to} )",
        "description": "Format a price range for display."
    },
    "wc_format_weight": {
        "prefix": "wc_format_weight",
        "body": "wc_format_weight( ${1:weight} )",
        "description": "Format a weight for display."
    },
    "wc_format_dimensions": {
        "prefix": "wc_format_dimensions",
        "body": "wc_format_dimensions( ${1:dimensions} )",
        "description": "Format dimensions for display."
    },
    "wc_format_datetime": {
        "prefix": "wc_format_datetime",
        "body": "wc_format_datetime( ${1:date}${2:, ${3:format}} )",
        "description": "Format a date for output."
    },
    "wc_do_oembeds": {
        "prefix": "wc_do_oembeds",
        "body": "wc_do_oembeds( ${1:content} )",
        "description": "Process oEmbeds."
    },
    "wc_get_string_before_colon": {
        "prefix": "wc_get_string_before_colon",
        "body": "wc_get_string_before_colon( ${1:string} )",
        "description": "Get part of a string before :."
    },
    "wc_array_merge_recursive_numeric": {
        "prefix": "wc_array_merge_recursive_numeric",
        "body": "wc_array_merge_recursive_numeric()",
        "description": "Array merge and sum function."
    },
    "wc_implode_html_attributes": {
        "prefix": "wc_implode_html_attributes",
        "body": "wc_implode_html_attributes( ${1:raw_attributes} )",
        "description": "Implode and escape HTML attributes for output."
    },
    "wc_parse_relative_date_option": {
        "prefix": "wc_parse_relative_date_option",
        "body": "wc_parse_relative_date_option( ${1:raw_value} )",
        "description": "Parse a relative date option from the settings API into a standard format."
    },
    "wc_sanitize_endpoint_slug": {
        "prefix": "wc_sanitize_endpoint_slug",
        "body": "wc_sanitize_endpoint_slug( ${1:raw_value} )",
        "description": "Format the endpoint slug, strip out anything not allowed in a url."
    },
    "wc_notice_count": {
        "prefix": "wc_notice_count",
        "body": "wc_notice_count( ${1:notice_type} )",
        "description": "Get the count of notices added, either for all notices (default) or for one."
    },
    "wc_has_notice": {
        "prefix": "wc_has_notice",
        "body": "wc_has_notice( ${1:message}${2:, ${3:notice_type}} )",
        "description": "Check if a notice has already been added."
    },
    "wc_add_notice": {
        "prefix": "wc_add_notice",
        "body": "wc_add_notice( ${1:message}${2:, ${3:notice_type}}${4:, ${5:data}} )",
        "description": "Add and store a notice."
    },
    "wc_set_notices": {
        "prefix": "wc_set_notices",
        "body": "wc_set_notices( ${1:notices} )",
        "description": "Set all notices at once."
    },
    "wc_clear_notices": {
        "prefix": "wc_clear_notices",
        "body": "wc_clear_notices()",
        "description": "Unset all notices."
    },
    "wc_print_notices": {
        "prefix": "wc_print_notices",
        "body": "wc_print_notices( ${1:return} )",
        "description": "Prints messages and errors which are stored in the session, then clears them."
    },
    "wc_print_notice": {
        "prefix": "wc_print_notice",
        "body": "wc_print_notice( ${1:message}${2:, ${3:notice_type}}${4:, ${5:data}} )",
        "description": "Print a single notice immediately."
    },
    "wc_get_notices": {
        "prefix": "wc_get_notices",
        "body": "wc_get_notices( ${1:notice_type} )",
        "description": "Returns all queued notices, optionally filtered by a notice type."
    },
    "wc_add_wp_error_notices": {
        "prefix": "wc_add_wp_error_notices",
        "body": "wc_add_wp_error_notices( ${1:errors} )",
        "description": "Add notices for WP Errors."
    },
    "wc_kses_notice": {
        "prefix": "wc_kses_notice",
        "body": "wc_kses_notice( ${1:message} )",
        "description": "Filters out the same tags as wp_kses_post, but allows tabindex for <a> element."
    },
    "wc_get_orders": {
        "prefix": "wc_get_orders",
        "body": "wc_get_orders( ${1:args} )",
        "description": "Standard way of retrieving orders based on certain parameters."
    },
    "wc_get_order": {
        "prefix": "wc_get_order",
        "body": "wc_get_order( ${1:the_order} )",
        "description": "Main function for returning orders, uses the WC_Order_Factory class."
    },
    "wc_get_order_statuses": {
        "prefix": "wc_get_order_statuses",
        "body": "wc_get_order_statuses()",
        "description": "Get all order statuses."
    },
    "wc_is_order_status": {
        "prefix": "wc_is_order_status",
        "body": "wc_is_order_status( ${1:maybe_status} )",
        "description": "See if a string is an order status."
    },
    "wc_get_is_paid_statuses": {
        "prefix": "wc_get_is_paid_statuses",
        "body": "wc_get_is_paid_statuses()",
        "description": "Get list of statuses which are consider 'paid'."
    },
    "wc_get_order_status_name": {
        "prefix": "wc_get_order_status_name",
        "body": "wc_get_order_status_name( ${1:status} )",
        "description": "Get the nice name for an order status."
    },
    "wc_get_order_id_by_order_key": {
        "prefix": "wc_get_order_id_by_order_key",
        "body": "wc_get_order_id_by_order_key( ${1:order_key} )",
        "description": "Finds an Order ID based on an order key."
    },
    "wc_get_order_types": {
        "prefix": "wc_get_order_types",
        "body": "wc_get_order_types( ${1:for} )",
        "description": "Get all registered order types."
    },
    "wc_get_order_type": {
        "prefix": "wc_get_order_type",
        "body": "wc_get_order_type( ${1:type} )",
        "description": "Get an order type by post type name."
    },
    "wc_register_order_type": {
        "prefix": "wc_register_order_type",
        "body": "wc_register_order_type( ${1:type}${2:, ${3:args}} )",
        "description": "Register order type. Do not use before init."
    },
    "wc_processing_order_count": {
        "prefix": "wc_processing_order_count",
        "body": "wc_processing_order_count()",
        "description": "Return the count of processing orders."
    },
    "wc_orders_count": {
        "prefix": "wc_orders_count",
        "body": "wc_orders_count( ${1:status} )",
        "description": "Return the orders count of a specific order status."
    },
    "wc_downloadable_file_permission": {
        "prefix": "wc_downloadable_file_permission",
        "body": "wc_downloadable_file_permission( ${1:download_id}, ${2:product}, ${3:order}${4:, ${5:qty}} )",
        "description": "Grant downloadable product access to the file identified by $download_id."
    },
    "wc_downloadable_product_permissions": {
        "prefix": "wc_downloadable_product_permissions",
        "body": "wc_downloadable_product_permissions( ${1:order_id}${2:, ${3:force}} )",
        "description": "Order Status completed - give downloadable product access to customer."
    },
    "wc_delete_shop_order_transients": {
        "prefix": "wc_delete_shop_order_transients",
        "body": "wc_delete_shop_order_transients( ${1:order} )",
        "description": "Clear all transients cache for order data."
    },
    "wc_ship_to_billing_address_only": {
        "prefix": "wc_ship_to_billing_address_only",
        "body": "wc_ship_to_billing_address_only()",
        "description": "See if we only ship to billing addresses."
    },
    "wc_create_refund": {
        "prefix": "wc_create_refund",
        "body": "wc_create_refund( ${1:args} )",
        "description": "Create a new order refund programmatically."
    },
    "wc_refund_payment": {
        "prefix": "wc_refund_payment",
        "body": "wc_refund_payment( ${1:order}, ${2:amount}${3:, ${4:reason}} )",
        "description": "Try to refund the payment for an order via the gateway."
    },
    "wc_restock_refunded_items": {
        "prefix": "wc_restock_refunded_items",
        "body": "wc_restock_refunded_items( ${1:order}, ${2:refunded_line_items} )",
        "description": "Restock items during refund."
    },
    "wc_get_tax_class_by_tax_id": {
        "prefix": "wc_get_tax_class_by_tax_id",
        "body": "wc_get_tax_class_by_tax_id( ${1:tax_id} )",
        "description": "Get tax class by tax id."
    },
    "wc_get_payment_gateway_by_order": {
        "prefix": "wc_get_payment_gateway_by_order",
        "body": "wc_get_payment_gateway_by_order( ${1:order} )",
        "description": "Get payment gateway class by order data."
    },
    "wc_order_fully_refunded": {
        "prefix": "wc_order_fully_refunded",
        "body": "wc_order_fully_refunded( ${1:order_id} )",
        "description": "When refunding an order, create a refund line item if the partial refunds do not match order total."
    },
    "wc_order_search": {
        "prefix": "wc_order_search",
        "body": "wc_order_search( ${1:term} )",
        "description": "Search orders."
    },
    "wc_update_total_sales_counts": {
        "prefix": "wc_update_total_sales_counts",
        "body": "wc_update_total_sales_counts( ${1:order_id} )",
        "description": "Update total sales amount for each product within a paid order."
    },
    "wc_update_coupon_usage_counts": {
        "prefix": "wc_update_coupon_usage_counts",
        "body": "wc_update_coupon_usage_counts( ${1:order_id} )",
        "description": "Update used coupon amount for each coupon within an order."
    },
    "wc_cancel_unpaid_orders": {
        "prefix": "wc_cancel_unpaid_orders",
        "body": "wc_cancel_unpaid_orders()",
        "description": "Cancel all unpaid orders after held duration to prevent stock lock for those products."
    },
    "wc_sanitize_order_id": {
        "prefix": "wc_sanitize_order_id",
        "body": "wc_sanitize_order_id( ${1:order_id} )",
        "description": "Sanitize order id removing unwanted characters."
    },
    "wc_get_order_note": {
        "prefix": "wc_get_order_note",
        "body": "wc_get_order_note( ${1:data} )",
        "description": "Get an order note."
    },
    "wc_get_order_notes": {
        "prefix": "wc_get_order_notes",
        "body": "wc_get_order_notes( ${1:args} )",
        "description": "Get order notes."
    },
    "wc_create_order_note": {
        "prefix": "wc_create_order_note",
        "body": "wc_create_order_note( ${1:order_id}, ${2:note}${3:, ${4:is_customer_note}${5:, ${6:added_by_user}}} )",
        "description": "Create an order note."
    },
    "wc_delete_order_note": {
        "prefix": "wc_delete_order_note",
        "body": "wc_delete_order_note( ${1:note_id} )",
        "description": "Delete an order note."
    },
    "wc_add_order_item": {
        "prefix": "wc_add_order_item",
        "body": "wc_add_order_item( ${1:order_id}, ${2:item_array} )",
        "description": "Add a item to an order (for example a line item)."
    },
    "wc_update_order_item": {
        "prefix": "wc_update_order_item",
        "body": "wc_update_order_item( ${1:item_id}, ${2:args} )",
        "description": "Update an item for an order."
    },
    "wc_delete_order_item": {
        "prefix": "wc_delete_order_item",
        "body": "wc_delete_order_item( ${1:item_id} )",
        "description": "Delete an item from the order it belongs to based on item id."
    },
    "wc_update_order_item_meta": {
        "prefix": "wc_update_order_item_meta",
        "body": "wc_update_order_item_meta( ${1:item_id}, ${2:meta_key}, ${3:meta_value}${4:, ${5:prev_value}} )",
        "description": "WooCommerce Order Item Meta API - Update term meta."
    },
    "wc_add_order_item_meta": {
        "prefix": "wc_add_order_item_meta",
        "body": "wc_add_order_item_meta( ${1:item_id}, ${2:meta_key}, ${3:meta_value}${4:, ${5:unique}} )",
        "description": "WooCommerce Order Item Meta API - Add term meta."
    },
    "wc_delete_order_item_meta": {
        "prefix": "wc_delete_order_item_meta",
        "body": "wc_delete_order_item_meta( ${1:item_id}, ${2:meta_key}${3:, ${4:meta_value}${5:, ${6:delete_all}}} )",
        "description": "WooCommerce Order Item Meta API - Delete term meta."
    },
    "wc_get_order_item_meta": {
        "prefix": "wc_get_order_item_meta",
        "body": "wc_get_order_item_meta( ${1:item_id}, ${2:key}${3:, ${4:single}} )",
        "description": "WooCommerce Order Item Meta API - Get term meta."
    },
    "wc_get_order_id_by_order_item_id": {
        "prefix": "wc_get_order_id_by_order_item_id",
        "body": "wc_get_order_id_by_order_item_id( ${1:item_id} )",
        "description": "Get order ID by order item ID."
    },
    "wc_page_endpoint_title": {
        "prefix": "wc_page_endpoint_title",
        "body": "wc_page_endpoint_title( ${1:title} )",
        "description": "Replace a page title with the endpoint title."
    },
    "wc_get_page_id": {
        "prefix": "wc_get_page_id",
        "body": "wc_get_page_id( ${1:page} )",
        "description": "Retrieve page ids - used for myaccount, edit_address, shop, cart, checkout, pay, view_order, terms. returns -1 if no page is found."
    },
    "wc_get_page_permalink": {
        "prefix": "wc_get_page_permalink",
        "body": "wc_get_page_permalink( ${1:page}${2:, ${3:fallback}} )",
        "description": "Retrieve page permalink."
    },
    "wc_get_endpoint_url": {
        "prefix": "wc_get_endpoint_url",
        "body": "wc_get_endpoint_url( ${1:endpoint}${2:, ${3:value}${4:, ${5:permalink}}} )",
        "description": "Get endpoint URL."
    },
    "wc_nav_menu_items": {
        "prefix": "wc_nav_menu_items",
        "body": "wc_nav_menu_items( ${1:items} )",
        "description": "Hide menu items conditionally."
    },
    "wc_nav_menu_item_classes": {
        "prefix": "wc_nav_menu_item_classes",
        "body": "wc_nav_menu_item_classes( ${1:menu_items} )",
        "description": "Fix active class in nav for shop page."
    },
    "wc_list_pages": {
        "prefix": "wc_list_pages",
        "body": "wc_list_pages( ${1:pages} )",
        "description": "Fix active class in wp_list_pages for shop page."
    },
    "wc_get_products": {
        "prefix": "wc_get_products",
        "body": "wc_get_products( ${1:args} )",
        "description": "Standard way of retrieving products based on certain parameters."
    },
    "wc_get_product": {
        "prefix": "wc_get_product",
        "body": "wc_get_product( ${1:${2:the_product}${3:, ${4:deprecated}}} )",
        "description": "Main function for returning products, uses the WC_Product_Factory class."
    },
    "wc_product_sku_enabled": {
        "prefix": "wc_product_sku_enabled",
        "body": "wc_product_sku_enabled()",
        "description": "Returns whether or not SKUS are enabled."
    },
    "wc_product_weight_enabled": {
        "prefix": "wc_product_weight_enabled",
        "body": "wc_product_weight_enabled()",
        "description": "Returns whether or not product weights are enabled."
    },
    "wc_product_dimensions_enabled": {
        "prefix": "wc_product_dimensions_enabled",
        "body": "wc_product_dimensions_enabled()",
        "description": "Returns whether or not product dimensions (HxWxD) are enabled."
    },
    "wc_delete_product_transients": {
        "prefix": "wc_delete_product_transients",
        "body": "wc_delete_product_transients( ${1:post_id} )",
        "description": "Clear all transients cache for product data."
    },
    "wc_get_product_ids_on_sale": {
        "prefix": "wc_get_product_ids_on_sale",
        "body": "wc_get_product_ids_on_sale()",
        "description": "Function that returns an array containing the IDs of the products that are on sale."
    },
    "wc_get_featured_product_ids": {
        "prefix": "wc_get_featured_product_ids",
        "body": "wc_get_featured_product_ids()",
        "description": "Function that returns an array containing the IDs of the featured products."
    },
    "wc_product_post_type_link": {
        "prefix": "wc_product_post_type_link",
        "body": "wc_product_post_type_link( ${1:permalink}, ${2:post} )",
        "description": "Filter to allow product_cat in the permalinks for products."
    },
    "wc_placeholder_img_src": {
        "prefix": "wc_placeholder_img_src",
        "body": "wc_placeholder_img_src( ${1:size} )",
        "description": "Get the placeholder image URL for products etc."
    },
    "wc_placeholder_img": {
        "prefix": "wc_placeholder_img",
        "body": "wc_placeholder_img( ${1:size}${2:, ${3:attr}} )",
        "description": "Get the placeholder image."
    },
    "wc_get_formatted_variation": {
        "prefix": "wc_get_formatted_variation",
        "body": "wc_get_formatted_variation( ${1:variation}${2:, ${3:flat}${4:, ${5:include_names}${6:, ${7:skip_attributes_in_name}}}} )",
        "description": "Variation Formatting."
    },
    "wc_scheduled_sales": {
        "prefix": "wc_scheduled_sales",
        "body": "wc_scheduled_sales()",
        "description": "Function which handles the start and end of scheduled sales via cron."
    },
    "wc_get_attachment_image_attributes": {
        "prefix": "wc_get_attachment_image_attributes",
        "body": "wc_get_attachment_image_attributes( ${1:attr} )",
        "description": "Get attachment image attributes."
    },
    "wc_prepare_attachment_for_js": {
        "prefix": "wc_prepare_attachment_for_js",
        "body": "wc_prepare_attachment_for_js( ${1:response} )",
        "description": "Prepare attachment for JavaScript."
    },
    "wc_track_product_view": {
        "prefix": "wc_track_product_view",
        "body": "wc_track_product_view()",
        "description": "Track product views."
    },
    "wc_get_product_types": {
        "prefix": "wc_get_product_types",
        "body": "wc_get_product_types()",
        "description": "Get product types."
    },
    "wc_product_has_unique_sku": {
        "prefix": "wc_product_has_unique_sku",
        "body": "wc_product_has_unique_sku( ${1:product_id}, ${2:sku} )",
        "description": "Check if product sku is unique."
    },
    "wc_product_force_unique_sku": {
        "prefix": "wc_product_force_unique_sku",
        "body": "wc_product_force_unique_sku( ${1:product_id} )",
        "description": "Force a unique SKU."
    },
    "wc_product_generate_unique_sku": {
        "prefix": "wc_product_generate_unique_sku",
        "body": "wc_product_generate_unique_sku( ${1:product_id}, ${2:sku}${3:, ${4:index}} )",
        "description": "Recursively appends a suffix until a unique SKU is found."
    },
    "wc_get_product_id_by_sku": {
        "prefix": "wc_get_product_id_by_sku",
        "body": "wc_get_product_id_by_sku( ${1:sku} )",
        "description": "Get product ID by SKU."
    },
    "wc_get_product_variation_attributes": {
        "prefix": "wc_get_product_variation_attributes",
        "body": "wc_get_product_variation_attributes( ${1:variation_id} )",
        "description": "Get attibutes\/data for an individual variation from the database and maintain it's integrity."
    },
    "wc_get_product_cat_ids": {
        "prefix": "wc_get_product_cat_ids",
        "body": "wc_get_product_cat_ids( ${1:product_id} )",
        "description": "Get all product cats for a product by ID, including hierarchy"
    },
    "wc_get_product_attachment_props": {
        "prefix": "wc_get_product_attachment_props",
        "body": "wc_get_product_attachment_props( ${1:${2:attachment_id}${3:, ${4:product}}} )",
        "description": "Gets data about an attachment, such as alt text and captions."
    },
    "wc_get_product_visibility_options": {
        "prefix": "wc_get_product_visibility_options",
        "body": "wc_get_product_visibility_options()",
        "description": "Get product visibility options."
    },
    "wc_get_min_max_price_meta_query": {
        "prefix": "wc_get_min_max_price_meta_query",
        "body": "wc_get_min_max_price_meta_query( ${1:args} )",
        "description": "Get min\/max price meta query args."
    },
    "wc_get_product_tax_class_options": {
        "prefix": "wc_get_product_tax_class_options",
        "body": "wc_get_product_tax_class_options()",
        "description": "Get product tax class options."
    },
    "wc_get_product_stock_status_options": {
        "prefix": "wc_get_product_stock_status_options",
        "body": "wc_get_product_stock_status_options()",
        "description": "Get stock status options."
    },
    "wc_get_product_backorder_options": {
        "prefix": "wc_get_product_backorder_options",
        "body": "wc_get_product_backorder_options()",
        "description": "Get backorder options."
    },
    "wc_get_related_products": {
        "prefix": "wc_get_related_products",
        "body": "wc_get_related_products( ${1:product_id}${2:, ${3:limit}${4:, ${5:exclude_ids}}} )",
        "description": "Get related products based on product category and tags."
    },
    "wc_get_product_term_ids": {
        "prefix": "wc_get_product_term_ids",
        "body": "wc_get_product_term_ids( ${1:product_id}, ${2:taxonomy} )",
        "description": "Retrieves product term ids for a taxonomy."
    },
    "wc_get_price_including_tax": {
        "prefix": "wc_get_price_including_tax",
        "body": "wc_get_price_including_tax( ${1:product}${2:, ${3:args}} )",
        "description": "For a given product, and optionally price\/qty, work out the price with tax included, based on store settings."
    },
    "wc_get_price_excluding_tax": {
        "prefix": "wc_get_price_excluding_tax",
        "body": "wc_get_price_excluding_tax( ${1:product}${2:, ${3:args}} )",
        "description": "For a given product, and optionally price\/qty, work out the price with tax excluded, based on store settings."
    },
    "wc_get_price_to_display": {
        "prefix": "wc_get_price_to_display",
        "body": "wc_get_price_to_display( ${1:product}${2:, ${3:args}} )",
        "description": "Returns the price including or excluding tax, based on the 'woocommerce_tax_display_shop' setting."
    },
    "wc_get_product_category_list": {
        "prefix": "wc_get_product_category_list",
        "body": "wc_get_product_category_list( ${1:product_id}${2:, ${3:sep}${4:, ${5:before}${6:, ${7:after}}}} )",
        "description": "Returns the product categories in a list."
    },
    "wc_get_product_tag_list": {
        "prefix": "wc_get_product_tag_list",
        "body": "wc_get_product_tag_list( ${1:product_id}${2:, ${3:sep}${4:, ${5:before}${6:, ${7:after}}}} )",
        "description": "Returns the product tags in a list."
    },
    "wc_products_array_filter_visible": {
        "prefix": "wc_products_array_filter_visible",
        "body": "wc_products_array_filter_visible( ${1:product} )",
        "description": "Callback for array filter to get visible only."
    },
    "wc_products_array_filter_visible_grouped": {
        "prefix": "wc_products_array_filter_visible_grouped",
        "body": "wc_products_array_filter_visible_grouped( ${1:product} )",
        "description": "Callback for array filter to get visible grouped products only."
    },
    "wc_products_array_filter_editable": {
        "prefix": "wc_products_array_filter_editable",
        "body": "wc_products_array_filter_editable( ${1:product} )",
        "description": "Callback for array filter to get products the user can edit only."
    },
    "wc_products_array_filter_readable": {
        "prefix": "wc_products_array_filter_readable",
        "body": "wc_products_array_filter_readable( ${1:product} )",
        "description": "Callback for array filter to get products the user can view only."
    },
    "wc_products_array_orderby": {
        "prefix": "wc_products_array_orderby",
        "body": "wc_products_array_orderby( ${1:products}${2:, ${3:orderby}${4:, ${5:order}}} )",
        "description": "Sort an array of products by a value."
    },
    "wc_products_array_orderby_title": {
        "prefix": "wc_products_array_orderby_title",
        "body": "wc_products_array_orderby_title( ${1:a}, ${2:b} )",
        "description": "Sort by title."
    },
    "wc_products_array_orderby_id": {
        "prefix": "wc_products_array_orderby_id",
        "body": "wc_products_array_orderby_id( ${1:a}, ${2:b} )",
        "description": "Sort by id."
    },
    "wc_products_array_orderby_date": {
        "prefix": "wc_products_array_orderby_date",
        "body": "wc_products_array_orderby_date( ${1:a}, ${2:b} )",
        "description": "Sort by date."
    },
    "wc_products_array_orderby_modified": {
        "prefix": "wc_products_array_orderby_modified",
        "body": "wc_products_array_orderby_modified( ${1:a}, ${2:b} )",
        "description": "Sort by modified."
    },
    "wc_products_array_orderby_menu_order": {
        "prefix": "wc_products_array_orderby_menu_order",
        "body": "wc_products_array_orderby_menu_order( ${1:a}, ${2:b} )",
        "description": "Sort by menu order."
    },
    "wc_products_array_orderby_price": {
        "prefix": "wc_products_array_orderby_price",
        "body": "wc_products_array_orderby_price( ${1:a}, ${2:b} )",
        "description": "Sort by price low to high."
    },
    "wc_deferred_product_sync": {
        "prefix": "wc_deferred_product_sync",
        "body": "wc_deferred_product_sync( ${1:product_id} )",
        "description": "Queue a product for syncing at the end of the request."
    },
    "wc_rest_prepare_date_response": {
        "prefix": "wc_rest_prepare_date_response",
        "body": "wc_rest_prepare_date_response( ${1:date}${2:, ${3:utc}} )",
        "description": "Parses and formats a date for ISO8601\/RFC3339."
    },
    "wc_rest_allowed_image_mime_types": {
        "prefix": "wc_rest_allowed_image_mime_types",
        "body": "wc_rest_allowed_image_mime_types()",
        "description": "Returns image mime types users are allowed to upload via the API."
    },
    "wc_rest_upload_image_from_url": {
        "prefix": "wc_rest_upload_image_from_url",
        "body": "wc_rest_upload_image_from_url( ${1:image_url} )",
        "description": "Upload image from URL."
    },
    "wc_rest_set_uploaded_image_as_attachment": {
        "prefix": "wc_rest_set_uploaded_image_as_attachment",
        "body": "wc_rest_set_uploaded_image_as_attachment( ${1:upload}${2:, ${3:id}} )",
        "description": "Set uploaded image as attachment."
    },
    "wc_rest_validate_reports_request_arg": {
        "prefix": "wc_rest_validate_reports_request_arg",
        "body": "wc_rest_validate_reports_request_arg( ${1:value}, ${2:request}, ${3:param} )",
        "description": "Validate reports request arguments."
    },
    "wc_rest_urlencode_rfc3986": {
        "prefix": "wc_rest_urlencode_rfc3986",
        "body": "wc_rest_urlencode_rfc3986( ${1:value} )",
        "description": "Encodes a value according to RFC 3986."
    },
    "wc_rest_check_post_permissions": {
        "prefix": "wc_rest_check_post_permissions",
        "body": "wc_rest_check_post_permissions( ${1:post_type}${2:, ${3:context}${4:, ${5:object_id}}} )",
        "description": "Check permissions of posts on REST API."
    },
    "wc_rest_check_user_permissions": {
        "prefix": "wc_rest_check_user_permissions",
        "body": "wc_rest_check_user_permissions( ${1:${2:context}${3:, ${4:object_id}}} )",
        "description": "Check permissions of users on REST API."
    },
    "wc_rest_check_product_term_permissions": {
        "prefix": "wc_rest_check_product_term_permissions",
        "body": "wc_rest_check_product_term_permissions( ${1:taxonomy}${2:, ${3:context}${4:, ${5:object_id}}} )",
        "description": "Check permissions of product terms on REST API."
    },
    "wc_rest_check_manager_permissions": {
        "prefix": "wc_rest_check_manager_permissions",
        "body": "wc_rest_check_manager_permissions( ${1:object}${2:, ${3:context}} )",
        "description": "Check manager permissions on REST API."
    },
    "wc_rest_check_product_reviews_permissions": {
        "prefix": "wc_rest_check_product_reviews_permissions",
        "body": "wc_rest_check_product_reviews_permissions( ${1:${2:context}${3:, ${4:object_id}}} )",
        "description": "Check product reviews permissions on REST API."
    },
    "wc_update_product_stock": {
        "prefix": "wc_update_product_stock",
        "body": "wc_update_product_stock( ${1:product}${2:, ${3:stock_quantity}${4:, ${5:operation}}} )",
        "description": "Update a product's stock amount."
    },
    "wc_update_product_stock_status": {
        "prefix": "wc_update_product_stock_status",
        "body": "wc_update_product_stock_status( ${1:product_id}, ${2:status} )",
        "description": "Update a product's stock status."
    },
    "wc_maybe_reduce_stock_levels": {
        "prefix": "wc_maybe_reduce_stock_levels",
        "body": "wc_maybe_reduce_stock_levels( ${1:order_id} )",
        "description": "When a payment is complete, we can reduce stock levels for items within an order."
    },
    "wc_maybe_increase_stock_levels": {
        "prefix": "wc_maybe_increase_stock_levels",
        "body": "wc_maybe_increase_stock_levels( ${1:order_id} )",
        "description": "When a payment is cancelled, restore stock."
    },
    "wc_reduce_stock_levels": {
        "prefix": "wc_reduce_stock_levels",
        "body": "wc_reduce_stock_levels( ${1:order_id} )",
        "description": "Reduce stock levels for items within an order, if stock has not already been reduced for the items."
    },
    "wc_trigger_stock_change_notifications": {
        "prefix": "wc_trigger_stock_change_notifications",
        "body": "wc_trigger_stock_change_notifications( ${1:order}, ${2:changes} )",
        "description": "After stock change events, triggers emails and adds order notes."
    },
    "wc_increase_stock_levels": {
        "prefix": "wc_increase_stock_levels",
        "body": "wc_increase_stock_levels( ${1:order_id} )",
        "description": "Increase stock levels for items within an order."
    },
    "wc_get_held_stock_quantity": {
        "prefix": "wc_get_held_stock_quantity",
        "body": "wc_get_held_stock_quantity( ${1:product}${2:, ${3:exclude_order_id}} )",
        "description": "See how much stock is being held in pending orders."
    },
    "wc_get_low_stock_amount": {
        "prefix": "wc_get_low_stock_amount",
        "body": "wc_get_low_stock_amount( ${1:WC_Product product} )",
        "description": "Return low stock amount to determine if notification needs to be sent"
    },
    "wc_template_redirect": {
        "prefix": "wc_template_redirect",
        "body": "wc_template_redirect()",
        "description": "Handle redirects before content is output - hooked into template_redirect so is_page works."
    },
    "wc_send_frame_options_header": {
        "prefix": "wc_send_frame_options_header",
        "body": "wc_send_frame_options_header()",
        "description": "When loading sensitive checkout or account pages, send a HTTP header to limit rendering of pages to same origin iframes for security reasons."
    },
    "wc_prevent_endpoint_indexing": {
        "prefix": "wc_prevent_endpoint_indexing",
        "body": "wc_prevent_endpoint_indexing()",
        "description": "No index our endpoints."
    },
    "wc_prevent_adjacent_posts_rel_link_wp_head": {
        "prefix": "wc_prevent_adjacent_posts_rel_link_wp_head",
        "body": "wc_prevent_adjacent_posts_rel_link_wp_head()",
        "description": "Remove adjacent_posts_rel_link_wp_head - pointless for products."
    },
    "wc_gallery_noscript": {
        "prefix": "wc_gallery_noscript",
        "body": "wc_gallery_noscript()",
        "description": "Show the gallery if JS is disabled."
    },
    "wc_setup_product_data": {
        "prefix": "wc_setup_product_data",
        "body": "wc_setup_product_data( ${1:post} )",
        "description": "When the_post is called, put product data into a global."
    },
    "wc_setup_loop": {
        "prefix": "wc_setup_loop",
        "body": "wc_setup_loop( ${1:args} )",
        "description": "Sets up the woocommerce_loop global from the passed args or from the main query."
    },
    "wc_reset_loop": {
        "prefix": "wc_reset_loop",
        "body": "wc_reset_loop()",
        "description": "Resets the woocommerce_loop global."
    },
    "wc_get_loop_prop": {
        "prefix": "wc_get_loop_prop",
        "body": "wc_get_loop_prop( ${1:prop}${2:, ${3:default}} )",
        "description": "Gets a property from the woocommerce_loop global."
    },
    "wc_set_loop_prop": {
        "prefix": "wc_set_loop_prop",
        "body": "wc_set_loop_prop( ${1:prop}${2:, ${3:value}} )",
        "description": "Sets a property in the woocommerce_loop global."
    },
    "woocommerce_product_loop": {
        "prefix": "woocommerce_product_loop",
        "body": "woocommerce_product_loop()",
        "description": "Should the WooCommerce loop be displayed?"
    },
    "wc_generator_tag": {
        "prefix": "wc_generator_tag",
        "body": "wc_generator_tag( ${1:gen}, ${2:type} )",
        "description": "Output generator tag to aid debugging."
    },
    "wc_body_class": {
        "prefix": "wc_body_class",
        "body": "wc_body_class( ${1:classes} )",
        "description": "Add body classes for WC pages."
    },
    "wc_no_js": {
        "prefix": "wc_no_js",
        "body": "wc_no_js()",
        "description": "NO JS handling."
    },
    "wc_product_cat_class": {
        "prefix": "wc_product_cat_class",
        "body": "wc_product_cat_class( ${1:${2:class}${3:, ${4:category}}} )",
        "description": "Display the classes for the product cat div."
    },
    "wc_get_default_products_per_row": {
        "prefix": "wc_get_default_products_per_row",
        "body": "wc_get_default_products_per_row()",
        "description": "Get the default columns setting - this is how many products will be shown per row in loops."
    },
    "wc_get_default_product_rows_per_page": {
        "prefix": "wc_get_default_product_rows_per_page",
        "body": "wc_get_default_product_rows_per_page()",
        "description": "Get the default rows setting - this is how many product rows will be shown in loops."
    },
    "wc_reset_product_grid_settings": {
        "prefix": "wc_reset_product_grid_settings",
        "body": "wc_reset_product_grid_settings()",
        "description": "Reset the product grid settings when a new theme is activated."
    },
    "wc_get_loop_class": {
        "prefix": "wc_get_loop_class",
        "body": "wc_get_loop_class()",
        "description": "Get classname for woocommerce loops."
    },
    "wc_get_product_cat_class": {
        "prefix": "wc_get_product_cat_class",
        "body": "wc_get_product_cat_class( ${1:${2:class}${3:, ${4:category}}} )",
        "description": "Get the classes for the product cat div."
    },
    "wc_product_post_class": {
        "prefix": "wc_product_post_class",
        "body": "wc_product_post_class( ${1:classes}${2:, ${3:class}${4:, ${5:post_id}}} )",
        "description": "Adds extra post classes for products."
    },
    "wc_get_product_taxonomy_class": {
        "prefix": "wc_get_product_taxonomy_class",
        "body": "wc_get_product_taxonomy_class( ${1:term_ids}, ${2:taxonomy} )",
        "description": "Get product taxonomy HTML classes."
    },
    "wc_get_product_class": {
        "prefix": "wc_get_product_class",
        "body": "wc_get_product_class( ${1:${2:class}${3:, ${4:product_id}}} )",
        "description": "Retrieves the classes for the post div as an array."
    },
    "wc_product_class": {
        "prefix": "wc_product_class",
        "body": "wc_product_class( ${1:${2:class}${3:, ${4:product_id}}} )",
        "description": "Display the classes for the product div."
    },
    "wc_query_string_form_fields": {
        "prefix": "wc_query_string_form_fields",
        "body": "wc_query_string_form_fields( ${1:${2:values}${3:, ${4:exclude}${5:, ${6:current_key}${7:, ${8:return}}}}} )",
        "description": "Outputs hidden form inputs for each query string variable."
    },
    "wc_terms_and_conditions_page_id": {
        "prefix": "wc_terms_and_conditions_page_id",
        "body": "wc_terms_and_conditions_page_id()",
        "description": "Get the terms and conditons page ID."
    },
    "wc_privacy_policy_page_id": {
        "prefix": "wc_privacy_policy_page_id",
        "body": "wc_privacy_policy_page_id()",
        "description": "Get the privacy policy page ID."
    },
    "wc_terms_and_conditions_checkbox_enabled": {
        "prefix": "wc_terms_and_conditions_checkbox_enabled",
        "body": "wc_terms_and_conditions_checkbox_enabled()",
        "description": "See if the checkbox is enabled or not based on the existance of the terms page and checkbox text."
    },
    "wc_get_terms_and_conditions_checkbox_text": {
        "prefix": "wc_get_terms_and_conditions_checkbox_text",
        "body": "wc_get_terms_and_conditions_checkbox_text()",
        "description": "Get the terms and conditons checkbox text, if set."
    },
    "wc_get_privacy_policy_text": {
        "prefix": "wc_get_privacy_policy_text",
        "body": "wc_get_privacy_policy_text( ${1:type} )",
        "description": "Get the privacy policy text, if set."
    },
    "wc_terms_and_conditions_checkbox_text": {
        "prefix": "wc_terms_and_conditions_checkbox_text",
        "body": "wc_terms_and_conditions_checkbox_text()",
        "description": "Output t&c checkbox text."
    },
    "wc_terms_and_conditions_page_content": {
        "prefix": "wc_terms_and_conditions_page_content",
        "body": "wc_terms_and_conditions_page_content()",
        "description": "Output t&c page's content (if set). The page can be set from checkout settings."
    },
    "wc_checkout_privacy_policy_text": {
        "prefix": "wc_checkout_privacy_policy_text",
        "body": "wc_checkout_privacy_policy_text()",
        "description": "Render privacy policy text on the checkout."
    },
    "wc_registration_privacy_policy_text": {
        "prefix": "wc_registration_privacy_policy_text",
        "body": "wc_registration_privacy_policy_text()",
        "description": "Render privacy policy text on the register forms."
    },
    "wc_privacy_policy_text": {
        "prefix": "wc_privacy_policy_text",
        "body": "wc_privacy_policy_text( ${1:type} )",
        "description": "Output privacy policy text. This is custom text which can be added via the customizer\/privacy settings section."
    },
    "wc_replace_policy_page_link_placeholders": {
        "prefix": "wc_replace_policy_page_link_placeholders",
        "body": "wc_replace_policy_page_link_placeholders( ${1:text} )",
        "description": "Replaces placeholders with links to WooCommerce policy pages."
    },
    "woocommerce_content": {
        "prefix": "woocommerce_content",
        "body": "woocommerce_content()",
        "description": "Output WooCommerce content."
    },
    "woocommerce_output_content_wrapper": {
        "prefix": "woocommerce_output_content_wrapper",
        "body": "woocommerce_output_content_wrapper()",
        "description": "Output the start of the page wrapper."
    },
    "woocommerce_output_content_wrapper_end": {
        "prefix": "woocommerce_output_content_wrapper_end",
        "body": "woocommerce_output_content_wrapper_end()",
        "description": "Output the end of the page wrapper."
    },
    "woocommerce_get_sidebar": {
        "prefix": "woocommerce_get_sidebar",
        "body": "woocommerce_get_sidebar()",
        "description": "Get the shop sidebar template."
    },
    "woocommerce_demo_store": {
        "prefix": "woocommerce_demo_store",
        "body": "woocommerce_demo_store()",
        "description": "Adds a demo store banner to the site if enabled."
    },
    "woocommerce_page_title": {
        "prefix": "woocommerce_page_title",
        "body": "woocommerce_page_title( ${1:echo} )",
        "description": "Page Title function."
    },
    "woocommerce_product_loop_start": {
        "prefix": "woocommerce_product_loop_start",
        "body": "woocommerce_product_loop_start( ${1:echo} )",
        "description": "Output the start of a product loop. By default this is a UL."
    },
    "woocommerce_product_loop_end": {
        "prefix": "woocommerce_product_loop_end",
        "body": "woocommerce_product_loop_end( ${1:echo} )",
        "description": "Output the end of a product loop. By default this is a UL."
    },
    "woocommerce_template_loop_product_title": {
        "prefix": "woocommerce_template_loop_product_title",
        "body": "woocommerce_template_loop_product_title()",
        "description": "Show the product title in the product loop. By default this is an H2."
    },
    "woocommerce_template_loop_category_title": {
        "prefix": "woocommerce_template_loop_category_title",
        "body": "woocommerce_template_loop_category_title( ${1:category} )",
        "description": "Show the subcategory title in the product loop."
    },
    "woocommerce_template_loop_product_link_open": {
        "prefix": "woocommerce_template_loop_product_link_open",
        "body": "woocommerce_template_loop_product_link_open()",
        "description": "Insert the opening anchor tag for products in the loop."
    },
    "woocommerce_template_loop_product_link_close": {
        "prefix": "woocommerce_template_loop_product_link_close",
        "body": "woocommerce_template_loop_product_link_close()",
        "description": "Insert the opening anchor tag for products in the loop."
    },
    "woocommerce_template_loop_category_link_open": {
        "prefix": "woocommerce_template_loop_category_link_open",
        "body": "woocommerce_template_loop_category_link_open( ${1:category} )",
        "description": "Insert the opening anchor tag for categories in the loop."
    },
    "woocommerce_template_loop_category_link_close": {
        "prefix": "woocommerce_template_loop_category_link_close",
        "body": "woocommerce_template_loop_category_link_close()",
        "description": "Insert the closing anchor tag for categories in the loop."
    },
    "woocommerce_taxonomy_archive_description": {
        "prefix": "woocommerce_taxonomy_archive_description",
        "body": "woocommerce_taxonomy_archive_description()",
        "description": "Show an archive description on taxonomy archives."
    },
    "woocommerce_product_archive_description": {
        "prefix": "woocommerce_product_archive_description",
        "body": "woocommerce_product_archive_description()",
        "description": "Show a shop page description on product archives."
    },
    "woocommerce_template_loop_add_to_cart": {
        "prefix": "woocommerce_template_loop_add_to_cart",
        "body": "woocommerce_template_loop_add_to_cart( ${1:args} )",
        "description": "Get the add to cart template for the loop."
    },
    "woocommerce_template_loop_product_thumbnail": {
        "prefix": "woocommerce_template_loop_product_thumbnail",
        "body": "woocommerce_template_loop_product_thumbnail()",
        "description": "Get the product thumbnail for the loop."
    },
    "woocommerce_template_loop_price": {
        "prefix": "woocommerce_template_loop_price",
        "body": "woocommerce_template_loop_price()",
        "description": "Get the product price for the loop."
    },
    "woocommerce_template_loop_rating": {
        "prefix": "woocommerce_template_loop_rating",
        "body": "woocommerce_template_loop_rating()",
        "description": "Display the average rating in the loop."
    },
    "woocommerce_show_product_loop_sale_flash": {
        "prefix": "woocommerce_show_product_loop_sale_flash",
        "body": "woocommerce_show_product_loop_sale_flash()",
        "description": "Get the sale flash for the loop."
    },
    "woocommerce_get_product_thumbnail": {
        "prefix": "woocommerce_get_product_thumbnail",
        "body": "woocommerce_get_product_thumbnail( ${1:${2:size}${3:, ${4:deprecated1}${5:, ${6:deprecated2}}}} )",
        "description": "Get the product thumbnail, or the placeholder if not set."
    },
    "woocommerce_result_count": {
        "prefix": "woocommerce_result_count",
        "body": "woocommerce_result_count()",
        "description": "Output the result count text (Showing x - x of x results)."
    },
    "woocommerce_catalog_ordering": {
        "prefix": "woocommerce_catalog_ordering",
        "body": "woocommerce_catalog_ordering()",
        "description": "Output the product sorting options."
    },
    "woocommerce_pagination": {
        "prefix": "woocommerce_pagination",
        "body": "woocommerce_pagination()",
        "description": "Output the pagination."
    },
    "woocommerce_show_product_images": {
        "prefix": "woocommerce_show_product_images",
        "body": "woocommerce_show_product_images()",
        "description": "Output the product image before the single product summary."
    },
    "woocommerce_show_product_thumbnails": {
        "prefix": "woocommerce_show_product_thumbnails",
        "body": "woocommerce_show_product_thumbnails()",
        "description": "Output the product thumbnails."
    },
    "wc_get_gallery_image_html": {
        "prefix": "wc_get_gallery_image_html",
        "body": "wc_get_gallery_image_html( ${1:attachment_id}${2:, ${3:main_image}} )",
        "description": "Get HTML for a gallery image."
    },
    "woocommerce_output_product_data_tabs": {
        "prefix": "woocommerce_output_product_data_tabs",
        "body": "woocommerce_output_product_data_tabs()",
        "description": "Output the product tabs."
    },
    "woocommerce_template_single_title": {
        "prefix": "woocommerce_template_single_title",
        "body": "woocommerce_template_single_title()",
        "description": "Output the product title."
    },
    "woocommerce_template_single_rating": {
        "prefix": "woocommerce_template_single_rating",
        "body": "woocommerce_template_single_rating()",
        "description": "Output the product rating."
    },
    "woocommerce_template_single_price": {
        "prefix": "woocommerce_template_single_price",
        "body": "woocommerce_template_single_price()",
        "description": "Output the product price."
    },
    "woocommerce_template_single_excerpt": {
        "prefix": "woocommerce_template_single_excerpt",
        "body": "woocommerce_template_single_excerpt()",
        "description": "Output the product short description (excerpt)."
    },
    "woocommerce_template_single_meta": {
        "prefix": "woocommerce_template_single_meta",
        "body": "woocommerce_template_single_meta()",
        "description": "Output the product meta."
    },
    "woocommerce_template_single_sharing": {
        "prefix": "woocommerce_template_single_sharing",
        "body": "woocommerce_template_single_sharing()",
        "description": "Output the product sharing."
    },
    "woocommerce_show_product_sale_flash": {
        "prefix": "woocommerce_show_product_sale_flash",
        "body": "woocommerce_show_product_sale_flash()",
        "description": "Output the product sale flash."
    },
    "woocommerce_template_single_add_to_cart": {
        "prefix": "woocommerce_template_single_add_to_cart",
        "body": "woocommerce_template_single_add_to_cart()",
        "description": "Trigger the single product add to cart action."
    },
    "woocommerce_simple_add_to_cart": {
        "prefix": "woocommerce_simple_add_to_cart",
        "body": "woocommerce_simple_add_to_cart()",
        "description": "Output the simple product add to cart area."
    },
    "woocommerce_grouped_add_to_cart": {
        "prefix": "woocommerce_grouped_add_to_cart",
        "body": "woocommerce_grouped_add_to_cart()",
        "description": "Output the grouped product add to cart area."
    },
    "woocommerce_variable_add_to_cart": {
        "prefix": "woocommerce_variable_add_to_cart",
        "body": "woocommerce_variable_add_to_cart()",
        "description": "Output the variable product add to cart area."
    },
    "woocommerce_external_add_to_cart": {
        "prefix": "woocommerce_external_add_to_cart",
        "body": "woocommerce_external_add_to_cart()",
        "description": "Output the external product add to cart area."
    },
    "woocommerce_quantity_input": {
        "prefix": "woocommerce_quantity_input",
        "body": "woocommerce_quantity_input( ${1:${2:args}${3:, ${4:product}${5:, ${6:echo}}}} )",
        "description": "Output the quantity input for add to cart forms."
    },
    "woocommerce_product_description_tab": {
        "prefix": "woocommerce_product_description_tab",
        "body": "woocommerce_product_description_tab()",
        "description": "Output the description tab content."
    },
    "woocommerce_product_additional_information_tab": {
        "prefix": "woocommerce_product_additional_information_tab",
        "body": "woocommerce_product_additional_information_tab()",
        "description": "Output the attributes tab content."
    },
    "woocommerce_default_product_tabs": {
        "prefix": "woocommerce_default_product_tabs",
        "body": "woocommerce_default_product_tabs( ${1:tabs} )",
        "description": "Add default product tabs to product pages."
    },
    "woocommerce_sort_product_tabs": {
        "prefix": "woocommerce_sort_product_tabs",
        "body": "woocommerce_sort_product_tabs( ${1:tabs} )",
        "description": "Sort tabs by priority."
    },
    "_sort_priority_callback": {
        "prefix": "_sort_priority_callback",
        "body": "_sort_priority_callback( ${1:a}, ${2:b} )",
        "description": "Sort Priority Callback Function"
    },
    "woocommerce_comments": {
        "prefix": "woocommerce_comments",
        "body": "woocommerce_comments( ${1:comment}, ${2:args}, ${3:depth} )",
        "description": "Output the Review comments template."
    },
    "woocommerce_review_display_gravatar": {
        "prefix": "woocommerce_review_display_gravatar",
        "body": "woocommerce_review_display_gravatar( ${1:comment} )",
        "description": "Display the review authors gravatar"
    },
    "woocommerce_review_display_rating": {
        "prefix": "woocommerce_review_display_rating",
        "body": "woocommerce_review_display_rating()",
        "description": "Display the reviewers star rating"
    },
    "woocommerce_review_display_meta": {
        "prefix": "woocommerce_review_display_meta",
        "body": "woocommerce_review_display_meta()",
        "description": "Display the review authors meta (name, verified owner, review date)"
    },
    "woocommerce_review_display_comment_text": {
        "prefix": "woocommerce_review_display_comment_text",
        "body": "woocommerce_review_display_comment_text()",
        "description": "Display the review content."
    },
    "woocommerce_output_related_products": {
        "prefix": "woocommerce_output_related_products",
        "body": "woocommerce_output_related_products()",
        "description": "Output the related products."
    },
    "woocommerce_related_products": {
        "prefix": "woocommerce_related_products",
        "body": "woocommerce_related_products( ${1:args} )",
        "description": "Output the related products."
    },
    "woocommerce_upsell_display": {
        "prefix": "woocommerce_upsell_display",
        "body": "woocommerce_upsell_display( ${1:${2:limit}${3:, ${4:columns}${5:, ${6:orderby}${7:, ${8:order}}}}} )",
        "description": "Output product up sells."
    },
    "woocommerce_shipping_calculator": {
        "prefix": "woocommerce_shipping_calculator",
        "body": "woocommerce_shipping_calculator( ${1:button_text} )",
        "description": "Output the cart shipping calculator."
    },
    "woocommerce_cart_totals": {
        "prefix": "woocommerce_cart_totals",
        "body": "woocommerce_cart_totals()",
        "description": "Output the cart totals."
    },
    "woocommerce_cross_sell_display": {
        "prefix": "woocommerce_cross_sell_display",
        "body": "woocommerce_cross_sell_display( ${1:${2:limit}${3:, ${4:columns}${5:, ${6:orderby}${7:, ${8:order}}}}} )",
        "description": "Output the cart cross-sells."
    },
    "woocommerce_button_proceed_to_checkout": {
        "prefix": "woocommerce_button_proceed_to_checkout",
        "body": "woocommerce_button_proceed_to_checkout()",
        "description": "Output the proceed to checkout button."
    },
    "woocommerce_widget_shopping_cart_button_view_cart": {
        "prefix": "woocommerce_widget_shopping_cart_button_view_cart",
        "body": "woocommerce_widget_shopping_cart_button_view_cart()",
        "description": "Output the view cart button."
    },
    "woocommerce_widget_shopping_cart_proceed_to_checkout": {
        "prefix": "woocommerce_widget_shopping_cart_proceed_to_checkout",
        "body": "woocommerce_widget_shopping_cart_proceed_to_checkout()",
        "description": "Output the proceed to checkout button."
    },
    "woocommerce_mini_cart": {
        "prefix": "woocommerce_mini_cart",
        "body": "woocommerce_mini_cart( ${1:args} )",
        "description": "Output the Mini-cart - used by cart widget."
    },
    "woocommerce_login_form": {
        "prefix": "woocommerce_login_form",
        "body": "woocommerce_login_form( ${1:args} )",
        "description": "Output the WooCommerce Login Form."
    },
    "woocommerce_checkout_login_form": {
        "prefix": "woocommerce_checkout_login_form",
        "body": "woocommerce_checkout_login_form()",
        "description": "Output the WooCommerce Checkout Login Form."
    },
    "woocommerce_breadcrumb": {
        "prefix": "woocommerce_breadcrumb",
        "body": "woocommerce_breadcrumb( ${1:args} )",
        "description": "Output the WooCommerce Breadcrumb."
    },
    "woocommerce_order_review": {
        "prefix": "woocommerce_order_review",
        "body": "woocommerce_order_review( ${1:deprecated} )",
        "description": "Output the Order review table for the checkout."
    },
    "woocommerce_checkout_payment": {
        "prefix": "woocommerce_checkout_payment",
        "body": "woocommerce_checkout_payment()",
        "description": "Output the Payment Methods on the checkout."
    },
    "woocommerce_checkout_coupon_form": {
        "prefix": "woocommerce_checkout_coupon_form",
        "body": "woocommerce_checkout_coupon_form()",
        "description": "Output the Coupon form for the checkout."
    },
    "woocommerce_products_will_display": {
        "prefix": "woocommerce_products_will_display",
        "body": "woocommerce_products_will_display()",
        "description": "Check if we will be showing products or not (and not sub-categories only)."
    },
    "woocommerce_get_loop_display_mode": {
        "prefix": "woocommerce_get_loop_display_mode",
        "body": "woocommerce_get_loop_display_mode()",
        "description": "See what is going to display in the loop."
    },
    "woocommerce_maybe_show_product_subcategories": {
        "prefix": "woocommerce_maybe_show_product_subcategories",
        "body": "woocommerce_maybe_show_product_subcategories( ${1:loop_html} )",
        "description": "Maybe display categories before, or instead of, a product loop."
    },
    "woocommerce_product_subcategories": {
        "prefix": "woocommerce_product_subcategories",
        "body": "woocommerce_product_subcategories( ${1:args} )",
        "description": "This is a legacy function which used to check if we needed to display subcats and then output them. It was called by templates."
    },
    "woocommerce_output_product_categories": {
        "prefix": "woocommerce_output_product_categories",
        "body": "woocommerce_output_product_categories( ${1:args} )",
        "description": "Display product sub categories as thumbnails."
    },
    "woocommerce_get_product_subcategories": {
        "prefix": "woocommerce_get_product_subcategories",
        "body": "woocommerce_get_product_subcategories( ${1:parent_id} )",
        "description": "Get (and cache) product subcategories."
    },
    "woocommerce_subcategory_thumbnail": {
        "prefix": "woocommerce_subcategory_thumbnail",
        "body": "woocommerce_subcategory_thumbnail( ${1:category} )",
        "description": "Show subcategory thumbnails."
    },
    "woocommerce_order_details_table": {
        "prefix": "woocommerce_order_details_table",
        "body": "woocommerce_order_details_table( ${1:order_id} )",
        "description": "Displays order details in a table."
    },
    "woocommerce_order_downloads_table": {
        "prefix": "woocommerce_order_downloads_table",
        "body": "woocommerce_order_downloads_table( ${1:downloads} )",
        "description": "Displays order downloads in a table."
    },
    "woocommerce_order_again_button": {
        "prefix": "woocommerce_order_again_button",
        "body": "woocommerce_order_again_button( ${1:order} )",
        "description": "Display an 'order again' button on the view order page."
    },
    "woocommerce_form_field": {
        "prefix": "woocommerce_form_field",
        "body": "woocommerce_form_field( ${1:key}, ${2:args}${3:, ${4:value}} )",
        "description": "Outputs a checkout\/address form field."
    },
    "get_product_search_form": {
        "prefix": "get_product_search_form",
        "body": "get_product_search_form( ${1:echo} )",
        "description": "Display product search form."
    },
    "woocommerce_output_auth_header": {
        "prefix": "woocommerce_output_auth_header",
        "body": "woocommerce_output_auth_header()",
        "description": "Output the Auth header."
    },
    "woocommerce_output_auth_footer": {
        "prefix": "woocommerce_output_auth_footer",
        "body": "woocommerce_output_auth_footer()",
        "description": "Output the Auth footer."
    },
    "woocommerce_single_variation": {
        "prefix": "woocommerce_single_variation",
        "body": "woocommerce_single_variation()",
        "description": "Output placeholders for the single variation."
    },
    "woocommerce_single_variation_add_to_cart_button": {
        "prefix": "woocommerce_single_variation_add_to_cart_button",
        "body": "woocommerce_single_variation_add_to_cart_button()",
        "description": "Output the add to cart button for variations."
    },
    "wc_dropdown_variation_attribute_options": {
        "prefix": "wc_dropdown_variation_attribute_options",
        "body": "wc_dropdown_variation_attribute_options( ${1:args} )",
        "description": "Output a list of variation attributes for use in the cart forms."
    },
    "woocommerce_account_content": {
        "prefix": "woocommerce_account_content",
        "body": "woocommerce_account_content()",
        "description": "My Account content output."
    },
    "woocommerce_account_navigation": {
        "prefix": "woocommerce_account_navigation",
        "body": "woocommerce_account_navigation()",
        "description": "My Account navigation template."
    },
    "woocommerce_account_orders": {
        "prefix": "woocommerce_account_orders",
        "body": "woocommerce_account_orders( ${1:current_page} )",
        "description": "My Account > Orders template."
    },
    "woocommerce_account_view_order": {
        "prefix": "woocommerce_account_view_order",
        "body": "woocommerce_account_view_order( ${1:order_id} )",
        "description": "My Account > View order template."
    },
    "woocommerce_account_downloads": {
        "prefix": "woocommerce_account_downloads",
        "body": "woocommerce_account_downloads()",
        "description": "My Account > Downloads template."
    },
    "woocommerce_account_edit_address": {
        "prefix": "woocommerce_account_edit_address",
        "body": "woocommerce_account_edit_address( ${1:type} )",
        "description": "My Account > Edit address template."
    },
    "woocommerce_account_payment_methods": {
        "prefix": "woocommerce_account_payment_methods",
        "body": "woocommerce_account_payment_methods()",
        "description": "My Account > Downloads template."
    },
    "woocommerce_account_add_payment_method": {
        "prefix": "woocommerce_account_add_payment_method",
        "body": "woocommerce_account_add_payment_method()",
        "description": "My Account > Add payment method template."
    },
    "woocommerce_account_edit_account": {
        "prefix": "woocommerce_account_edit_account",
        "body": "woocommerce_account_edit_account()",
        "description": "My Account > Edit account template."
    },
    "wc_no_products_found": {
        "prefix": "wc_no_products_found",
        "body": "wc_no_products_found()",
        "description": "Handles the loop when no products were found\/no product exist."
    },
    "wc_get_email_order_items": {
        "prefix": "wc_get_email_order_items",
        "body": "wc_get_email_order_items( ${1:order}${2:, ${3:args}} )",
        "description": "Get HTML for the order items to be shown in emails."
    },
    "wc_display_item_meta": {
        "prefix": "wc_display_item_meta",
        "body": "wc_display_item_meta( ${1:item}${2:, ${3:args}} )",
        "description": "Display item meta data."
    },
    "wc_display_item_downloads": {
        "prefix": "wc_display_item_downloads",
        "body": "wc_display_item_downloads( ${1:item}${2:, ${3:args}} )",
        "description": "Display item download links."
    },
    "woocommerce_photoswipe": {
        "prefix": "woocommerce_photoswipe",
        "body": "woocommerce_photoswipe()",
        "description": "Get the shop sidebar template."
    },
    "wc_display_product_attributes": {
        "prefix": "wc_display_product_attributes",
        "body": "wc_display_product_attributes( ${1:product} )",
        "description": "Outputs a list of product attributes for a product."
    },
    "wc_get_stock_html": {
        "prefix": "wc_get_stock_html",
        "body": "wc_get_stock_html( ${1:product} )",
        "description": "Get HTML to show product stock."
    },
    "wc_get_rating_html": {
        "prefix": "wc_get_rating_html",
        "body": "wc_get_rating_html( ${1:rating}${2:, ${3:count}} )",
        "description": "Get HTML for ratings."
    },
    "wc_get_star_rating_html": {
        "prefix": "wc_get_star_rating_html",
        "body": "wc_get_star_rating_html( ${1:rating}${2:, ${3:count}} )",
        "description": "Get HTML for star rating."
    },
    "wc_get_price_html_from_text": {
        "prefix": "wc_get_price_html_from_text",
        "body": "wc_get_price_html_from_text()",
        "description": "Returns a 'from' prefix if you want to show where prices start at."
    },
    "wc_logout_url": {
        "prefix": "wc_logout_url",
        "body": "wc_logout_url( ${1:redirect} )",
        "description": "Get logout endpoint."
    },
    "wc_empty_cart_message": {
        "prefix": "wc_empty_cart_message",
        "body": "wc_empty_cart_message()",
        "description": "Show notice if cart is empty."
    },
    "wc_page_noindex": {
        "prefix": "wc_page_noindex",
        "body": "wc_page_noindex()",
        "description": "Disable search engines indexing core, dynamic, cart\/checkout pages."
    },
    "wc_get_theme_slug_for_templates": {
        "prefix": "wc_get_theme_slug_for_templates",
        "body": "wc_get_theme_slug_for_templates()",
        "description": "Get a slug identifying the current theme."
    },
    "wc_get_formatted_cart_item_data": {
        "prefix": "wc_get_formatted_cart_item_data",
        "body": "wc_get_formatted_cart_item_data( ${1:cart_item}${2:, ${3:flat}} )",
        "description": "Gets and formats a list of cart item data + variations for display on the frontend."
    },
    "wc_get_cart_remove_url": {
        "prefix": "wc_get_cart_remove_url",
        "body": "wc_get_cart_remove_url( ${1:cart_item_key} )",
        "description": "Gets the url to remove an item from the cart."
    },
    "wc_get_cart_undo_url": {
        "prefix": "wc_get_cart_undo_url",
        "body": "wc_get_cart_undo_url( ${1:cart_item_key} )",
        "description": "Gets the url to re-add an item into the cart."
    },
    "woocommerce_output_all_notices": {
        "prefix": "woocommerce_output_all_notices",
        "body": "woocommerce_output_all_notices()",
        "description": "Outputs all queued notices on WC pages."
    },
    "wc_products_rss_feed": {
        "prefix": "wc_products_rss_feed",
        "body": "wc_products_rss_feed()",
        "description": "Products RSS Feed."
    },
    "woocommerce_reset_loop": {
        "prefix": "woocommerce_reset_loop",
        "body": "woocommerce_reset_loop()",
        "description": "Reset the loop's index and columns when we're done outputting a product loop."
    },
    "woocommerce_product_reviews_tab": {
        "prefix": "woocommerce_product_reviews_tab",
        "body": "woocommerce_product_reviews_tab()",
        "description": "Output the reviews tab content."
    },
    "wc_get_object_terms": {
        "prefix": "wc_get_object_terms",
        "body": "wc_get_object_terms( ${1:object_id}, ${2:taxonomy}${3:, ${4:field}${5:, ${6:index_key}}} )",
        "description": "Helper to get cached object terms and filter by field using wp_list_pluck()."
    },
    "_wc_get_cached_product_terms": {
        "prefix": "_wc_get_cached_product_terms",
        "body": "_wc_get_cached_product_terms( ${1:product_id}, ${2:taxonomy}${3:, ${4:args}} )",
        "description": "Cached version of wp_get_post_terms()."
    },
    "wc_get_product_terms": {
        "prefix": "wc_get_product_terms",
        "body": "wc_get_product_terms( ${1:product_id}, ${2:taxonomy}${3:, ${4:args}} )",
        "description": "Wrapper for wp_get_post_terms which supports ordering by parent."
    },
    "_wc_get_product_terms_name_num_usort_callback": {
        "prefix": "_wc_get_product_terms_name_num_usort_callback",
        "body": "_wc_get_product_terms_name_num_usort_callback( ${1:a}, ${2:b} )",
        "description": "Sort by name (numeric)."
    },
    "_wc_get_product_terms_parent_usort_callback": {
        "prefix": "_wc_get_product_terms_parent_usort_callback",
        "body": "_wc_get_product_terms_parent_usort_callback( ${1:a}, ${2:b} )",
        "description": "Sort by parent."
    },
    "wc_product_dropdown_categories": {
        "prefix": "wc_product_dropdown_categories",
        "body": "wc_product_dropdown_categories( ${1:args} )",
        "description": "WooCommerce Dropdown categories."
    },
    "wc_walk_category_dropdown_tree": {
        "prefix": "wc_walk_category_dropdown_tree",
        "body": "wc_walk_category_dropdown_tree()",
        "description": "Custom walker for Product Categories."
    },
    "wc_taxonomy_metadata_update_content_for_split_terms": {
        "prefix": "wc_taxonomy_metadata_update_content_for_split_terms",
        "body": "wc_taxonomy_metadata_update_content_for_split_terms( ${1:old_term_id}, ${2:new_term_id}, ${3:term_taxonomy_id}, ${4:taxonomy} )",
        "description": "When a term is split, ensure meta data maintained."
    },
    "wc_taxonomy_metadata_migrate_data": {
        "prefix": "wc_taxonomy_metadata_migrate_data",
        "body": "wc_taxonomy_metadata_migrate_data( ${1:wp_db_version}, ${2:wp_current_db_version} )",
        "description": "Migrate data from WC term meta to WP term meta."
    },
    "update_woocommerce_term_meta": {
        "prefix": "update_woocommerce_term_meta",
        "body": "update_woocommerce_term_meta( ${1:term_id}, ${2:meta_key}, ${3:meta_value}${4:, ${5:prev_value}} )",
        "description": "WooCommerce Term Meta API."
    },
    "add_woocommerce_term_meta": {
        "prefix": "add_woocommerce_term_meta",
        "body": "add_woocommerce_term_meta( ${1:term_id}, ${2:meta_key}, ${3:meta_value}${4:, ${5:unique}} )",
        "description": "WooCommerce Term Meta API."
    },
    "delete_woocommerce_term_meta": {
        "prefix": "delete_woocommerce_term_meta",
        "body": "delete_woocommerce_term_meta( ${1:term_id}, ${2:meta_key}${3:, ${4:meta_value}${5:, ${6:deprecated}}} )",
        "description": "WooCommerce Term Meta API"
    },
    "get_woocommerce_term_meta": {
        "prefix": "get_woocommerce_term_meta",
        "body": "get_woocommerce_term_meta( ${1:term_id}, ${2:key}${3:, ${4:single}} )",
        "description": "WooCommerce Term Meta API"
    },
    "wc_reorder_terms": {
        "prefix": "wc_reorder_terms",
        "body": "wc_reorder_terms( ${1:the_term}, ${2:next_id}, ${3:taxonomy}${4:, ${5:index}${6:, ${7:terms}}} )",
        "description": "Move a term before the a given element of its hierarchy level."
    },
    "wc_set_term_order": {
        "prefix": "wc_set_term_order",
        "body": "wc_set_term_order( ${1:term_id}, ${2:index}, ${3:taxonomy}${4:, ${5:recursive}} )",
        "description": "Set the sort order of a term."
    },
    "wc_terms_clauses": {
        "prefix": "wc_terms_clauses",
        "body": "wc_terms_clauses( ${1:clauses}, ${2:taxonomies}, ${3:args} )",
        "description": "Add term ordering to get_terms."
    },
    "_wc_term_recount": {
        "prefix": "_wc_term_recount",
        "body": "_wc_term_recount( ${1:terms}, ${2:taxonomy}${3:, ${4:callback}${5:, ${6:terms_are_term_taxonomy_ids}}} )",
        "description": "Function for recounting product terms, ignoring hidden products."
    },
    "wc_recount_after_stock_change": {
        "prefix": "wc_recount_after_stock_change",
        "body": "wc_recount_after_stock_change( ${1:product_id} )",
        "description": "Recount terms after the stock amount changes."
    },
    "wc_change_term_counts": {
        "prefix": "wc_change_term_counts",
        "body": "wc_change_term_counts( ${1:terms}, ${2:taxonomies} )",
        "description": "Overrides the original term count for product categories and tags with the product count."
    },
    "wc_get_term_product_ids": {
        "prefix": "wc_get_term_product_ids",
        "body": "wc_get_term_product_ids( ${1:term_id}, ${2:taxonomy} )",
        "description": "Return products in a given term, and cache value."
    },
    "wc_clear_term_product_ids": {
        "prefix": "wc_clear_term_product_ids",
        "body": "wc_clear_term_product_ids( ${1:object_id}, ${2:terms}, ${3:tt_ids}, ${4:taxonomy}, ${5:append}, ${6:old_tt_ids} )",
        "description": "When a post is updated and terms recounted (called by _update_post_term_count), clear the ids."
    },
    "wc_get_product_visibility_term_ids": {
        "prefix": "wc_get_product_visibility_term_ids",
        "body": "wc_get_product_visibility_term_ids()",
        "description": "Get full list of product visibilty term ids."
    },
    "wc_disable_admin_bar": {
        "prefix": "wc_disable_admin_bar",
        "body": "wc_disable_admin_bar( ${1:show_admin_bar} )",
        "description": "Prevent any user who cannot 'edit_posts' (subscribers, customers etc) from seeing the admin bar."
    },
    "wc_create_new_customer": {
        "prefix": "wc_create_new_customer",
        "body": "wc_create_new_customer( ${1:email}${2:, ${3:username}${4:, ${5:password}}} )",
        "description": "Create a new customer."
    },
    "wc_set_customer_auth_cookie": {
        "prefix": "wc_set_customer_auth_cookie",
        "body": "wc_set_customer_auth_cookie( ${1:customer_id} )",
        "description": "Login a customer (set auth cookie and set global user object)."
    },
    "wc_update_new_customer_past_orders": {
        "prefix": "wc_update_new_customer_past_orders",
        "body": "wc_update_new_customer_past_orders( ${1:customer_id} )",
        "description": "Get past orders (by email) and update them."
    },
    "wc_paying_customer": {
        "prefix": "wc_paying_customer",
        "body": "wc_paying_customer( ${1:order_id} )",
        "description": "Order Status completed - This is a paying customer."
    },
    "wc_customer_bought_product": {
        "prefix": "wc_customer_bought_product",
        "body": "wc_customer_bought_product( ${1:customer_email}, ${2:user_id}, ${3:product_id} )",
        "description": "Checks if a user (by email or ID or both) has bought an item."
    },
    "wc_current_user_has_role": {
        "prefix": "wc_current_user_has_role",
        "body": "wc_current_user_has_role( ${1:role} )",
        "description": "Checks if the current user has a role."
    },
    "wc_user_has_role": {
        "prefix": "wc_user_has_role",
        "body": "wc_user_has_role( ${1:user}, ${2:role} )",
        "description": "Checks if a user has a role."
    },
    "wc_customer_has_capability": {
        "prefix": "wc_customer_has_capability",
        "body": "wc_customer_has_capability( ${1:allcaps}, ${2:caps}, ${3:args} )",
        "description": "Checks if a user has a certain capability."
    },
    "wc_modify_editable_roles": {
        "prefix": "wc_modify_editable_roles",
        "body": "wc_modify_editable_roles( ${1:roles} )",
        "description": "Modify the list of editable roles to prevent non-admin adding admin users."
    },
    "wc_modify_map_meta_cap": {
        "prefix": "wc_modify_map_meta_cap",
        "body": "wc_modify_map_meta_cap( ${1:caps}, ${2:cap}, ${3:user_id}, ${4:args} )",
        "description": "Modify capabilities to prevent non-admin users editing admin users."
    },
    "wc_get_customer_download_permissions": {
        "prefix": "wc_get_customer_download_permissions",
        "body": "wc_get_customer_download_permissions( ${1:customer_id} )",
        "description": "Get customer download permissions from the database."
    },
    "wc_get_customer_available_downloads": {
        "prefix": "wc_get_customer_available_downloads",
        "body": "wc_get_customer_available_downloads( ${1:customer_id} )",
        "description": "Get customer available downloads."
    },
    "wc_get_customer_total_spent": {
        "prefix": "wc_get_customer_total_spent",
        "body": "wc_get_customer_total_spent( ${1:user_id} )",
        "description": "Get total spent by customer."
    },
    "wc_get_customer_order_count": {
        "prefix": "wc_get_customer_order_count",
        "body": "wc_get_customer_order_count( ${1:user_id} )",
        "description": "Get total orders by customer."
    },
    "wc_reset_order_customer_id_on_deleted_user": {
        "prefix": "wc_reset_order_customer_id_on_deleted_user",
        "body": "wc_reset_order_customer_id_on_deleted_user( ${1:user_id} )",
        "description": "Reset customer ID on orders when a user is deleted."
    },
    "wc_review_is_from_verified_owner": {
        "prefix": "wc_review_is_from_verified_owner",
        "body": "wc_review_is_from_verified_owner( ${1:comment_id} )",
        "description": "Get review verification status."
    },
    "wc_disable_author_archives_for_customers": {
        "prefix": "wc_disable_author_archives_for_customers",
        "body": "wc_disable_author_archives_for_customers()",
        "description": "Disable author archives for customers."
    },
    "wc_update_profile_last_update_time": {
        "prefix": "wc_update_profile_last_update_time",
        "body": "wc_update_profile_last_update_time( ${1:user_id}, ${2:old} )",
        "description": "Hooks into the `profile_update` hook to set the user last updated timestamp."
    },
    "wc_meta_update_last_update_time": {
        "prefix": "wc_meta_update_last_update_time",
        "body": "wc_meta_update_last_update_time( ${1:meta_id}, ${2:user_id}, ${3:meta_key}, ${4:_meta_value} )",
        "description": "Hooks into the update user meta function to set the user last updated timestamp."
    },
    "wc_set_user_last_update_time": {
        "prefix": "wc_set_user_last_update_time",
        "body": "wc_set_user_last_update_time( ${1:user_id} )",
        "description": "Sets a user's \"last update\" time to the current timestamp."
    },
    "wc_get_customer_saved_methods_list": {
        "prefix": "wc_get_customer_saved_methods_list",
        "body": "wc_get_customer_saved_methods_list( ${1:customer_id} )",
        "description": "Get customer saved payment methods list."
    },
    "wc_get_customer_last_order": {
        "prefix": "wc_get_customer_last_order",
        "body": "wc_get_customer_last_order( ${1:customer_id} )",
        "description": "Get info about customer's last order."
    },
    "wc_user_search_columns": {
        "prefix": "wc_user_search_columns",
        "body": "wc_user_search_columns( ${1:search_columns} )",
        "description": "Add support for searching by display_name."
    },
    "wc_delete_user_data": {
        "prefix": "wc_delete_user_data",
        "body": "wc_delete_user_data( ${1:user_id} )",
        "description": "When a user is deleted in WordPress, delete corresponding WooCommerce data."
    },
    "wc_maybe_store_user_agent": {
        "prefix": "wc_maybe_store_user_agent",
        "body": "wc_maybe_store_user_agent( ${1:user_login}, ${2:user} )",
        "description": "Store user agents. Used for tracker."
    },
    "wc_user_logged_in": {
        "prefix": "wc_user_logged_in",
        "body": "wc_user_logged_in( ${1:user_login}, ${2:user} )",
        "description": "Update logic triggered on login."
    },
    "wc_current_user_is_active": {
        "prefix": "wc_current_user_is_active",
        "body": "wc_current_user_is_active()",
        "description": "Update when the user was last active."
    },
    "wc_update_user_last_active": {
        "prefix": "wc_update_user_last_active",
        "body": "wc_update_user_last_active( ${1:user_id} )",
        "description": "Set the user last active timestamp to now."
    },
    "wc_webhook_process_delivery": {
        "prefix": "wc_webhook_process_delivery",
        "body": "wc_webhook_process_delivery( ${1:webhook}, ${2:arg} )",
        "description": "Process webhook delivery."
    },
    "wc_deliver_webhook_async": {
        "prefix": "wc_deliver_webhook_async",
        "body": "wc_deliver_webhook_async( ${1:webhook_id}, ${2:arg} )",
        "description": "Wrapper function to execute the `woocommerce_deliver_webhook_async` cron."
    },
    "wc_is_webhook_valid_topic": {
        "prefix": "wc_is_webhook_valid_topic",
        "body": "wc_is_webhook_valid_topic( ${1:topic} )",
        "description": "Check if the given topic is a valid webhook topic, a topic is valid if:"
    },
    "wc_get_webhook_statuses": {
        "prefix": "wc_get_webhook_statuses",
        "body": "wc_get_webhook_statuses()",
        "description": "Get Webhook statuses."
    },
    "wc_load_webhooks": {
        "prefix": "wc_load_webhooks",
        "body": "wc_load_webhooks()",
        "description": "Load webhooks."
    },
    "wc_get_webhook": {
        "prefix": "wc_get_webhook",
        "body": "wc_get_webhook( ${1:id} )",
        "description": "Get webhook."
    },
    "wc_register_widgets": {
        "prefix": "wc_register_widgets",
        "body": "wc_register_widgets()",
        "description": "Register Widgets."
    },
    "wc_get_screen_ids": {
        "prefix": "wc_get_screen_ids",
        "body": "wc_get_screen_ids()",
        "description": "Get all WooCommerce screen ids."
    },
    "wc_create_page": {
        "prefix": "wc_create_page",
        "body": "wc_create_page( ${1:slug}${2:, ${3:option}${4:, ${5:page_title}${6:, ${7:page_content}${8:, ${9:post_parent}}}}} )",
        "description": "Create a page and store the ID in an option."
    },
    "woocommerce_admin_fields": {
        "prefix": "woocommerce_admin_fields",
        "body": "woocommerce_admin_fields( ${1:options} )",
        "description": "Output admin fields."
    },
    "woocommerce_update_options": {
        "prefix": "woocommerce_update_options",
        "body": "woocommerce_update_options( ${1:options}${2:, ${3:data}} )",
        "description": "Update all settings which are passed."
    },
    "woocommerce_settings_get_option": {
        "prefix": "woocommerce_settings_get_option",
        "body": "woocommerce_settings_get_option( ${1:option_name}${2:, ${3:default}} )",
        "description": "Get a setting from the settings API."
    },
    "wc_save_order_items": {
        "prefix": "wc_save_order_items",
        "body": "wc_save_order_items( ${1:order_id}, ${2:items} )",
        "description": "Save order items. Uses the CRUD."
    },
    "wc_render_action_buttons": {
        "prefix": "wc_render_action_buttons",
        "body": "wc_render_action_buttons( ${1:actions} )",
        "description": "Get HTML for some action buttons. Used in list tables."
    },
    "woocommerce_wp_text_input": {
        "prefix": "woocommerce_wp_text_input",
        "body": "woocommerce_wp_text_input( ${1:field} )",
        "description": "Output a text input box."
    },
    "woocommerce_wp_hidden_input": {
        "prefix": "woocommerce_wp_hidden_input",
        "body": "woocommerce_wp_hidden_input( ${1:field} )",
        "description": "Output a hidden input box."
    },
    "woocommerce_wp_textarea_input": {
        "prefix": "woocommerce_wp_textarea_input",
        "body": "woocommerce_wp_textarea_input( ${1:field} )",
        "description": "Output a textarea input box."
    },
    "woocommerce_wp_checkbox": {
        "prefix": "woocommerce_wp_checkbox",
        "body": "woocommerce_wp_checkbox( ${1:field} )",
        "description": "Output a checkbox input box."
    },
    "woocommerce_wp_select": {
        "prefix": "woocommerce_wp_select",
        "body": "woocommerce_wp_select( ${1:field} )",
        "description": "Output a select input box."
    },
    "woocommerce_wp_radio": {
        "prefix": "woocommerce_wp_radio",
        "body": "woocommerce_wp_radio( ${1:field} )",
        "description": "Output a radio input box."
    },
    "wc_importer_current_locale": {
        "prefix": "wc_importer_current_locale",
        "body": "wc_importer_current_locale()",
        "description": "Importer current locale."
    },
    "wc_importer_default_english_mappings": {
        "prefix": "wc_importer_default_english_mappings",
        "body": "wc_importer_default_english_mappings( ${1:mappings} )",
        "description": "Add English mapping placeholders when not using English as current language."
    },
    "wc_importer_default_special_english_mappings": {
        "prefix": "wc_importer_default_special_english_mappings",
        "body": "wc_importer_default_special_english_mappings( ${1:mappings} )",
        "description": "Add English special mapping placeholders when not using English as current language."
    },
    "wc_importer_generic_mappings": {
        "prefix": "wc_importer_generic_mappings",
        "body": "wc_importer_generic_mappings( ${1:mappings} )",
        "description": "Add generic mappings."
    },
    "wc_importer_wordpress_mappings": {
        "prefix": "wc_importer_wordpress_mappings",
        "body": "wc_importer_wordpress_mappings( ${1:mappings} )",
        "description": "Add mappings for WordPress tables."
    },
    "woocommerce_widget_shopping_cart_subtotal": {
        "prefix": "woocommerce_widget_shopping_cart_subtotal",
        "body": "woocommerce_widget_shopping_cart_subtotal()",
        "description": "Output to view cart subtotal."
    },
    "wc_translate_user_roles": {
        "prefix": "wc_translate_user_roles",
        "body": "wc_translate_user_roles( ${1:translation}, ${2:text}, ${3:context}, ${4:domain} )",
        "description": "Translate WC roles using the woocommerce textdomain."
    }
}